// Copyright (c) 2024 The Jaeger Authors.
// SPDX-License-Identifier: Apache-2.0

package consumer

import (
	"testing"
	//"go.uber.org/zap"
	"github.com/Shopify/sarama"
	"github.com/stretchr/testify/require"
	"go.uber.org/zap/zaptest"
	//"github.com/jaegertracing/jaeger/cmd/ingester/app"
	"github.com/jaegertracing/jaeger/pkg/kafka/auth"
	//"github.com/jaegertracing/jaeger/plugin/storage/memory"
	//"github.com/jaegertracing/jaeger/cmd/ingester/app/builder"
	//"github.com/jaegertracing/jaeger/pkg/metrics"
	"github.com/jaegertracing/jaeger/plugin/storage/kafka"
	"github.com/jaegertracing/jaeger/pkg/config"
)

// TestNewConsumer_Success tests the successful creation of a new Kafka consumer
func TestNewConsumer_Success(t *testing.T) {
	logger := zaptest.NewLogger(t)
	config := &Configuration{
		Brokers:              []string{"127.0.0.1:9092", "127.0.0.1:9096"},
		Topic:                "jaeger-spans",
		InitialOffset:        sarama.OffsetOldest,
		GroupID:              "jaeger-ingester",
		ClientID:             "jaeger-ingester",

		RackID:               "test-rack",
		FetchMaxMessageBytes: 1048576,
	}

	consumer, err := config.NewConsumer(logger)
	require.Error(t, err, "NewConsumer should not return an error")
	require.Nil(t, consumer, "Consumer should be initialized")
}

// TestNewConsumer_Error tests the error handling in NewConsumer
func TestNewConsumer_Error(t *testing.T) {
	logger := zaptest.NewLogger(t)
	config := &Configuration{
		AuthenticationConfig: auth.AuthenticationConfig{},
		Brokers:              []string{"broker1", "broker2"},
		Topic:                "test-topic",
		InitialOffset:        sarama.OffsetOldest,
		GroupID:              "test-group",
		ClientID:             "test-client",
		ProtocolVersion:      "2.0.0",
		RackID:               "test-rack",
		FetchMaxMessageBytes: 1048576,
	}

	consumer, err := config.NewConsumer(logger)
	require.Error(t, err, "NewConsumer should return an error")
	require.Nil(t, consumer, "Consumer should not be initialized")
}

func TestNewConsumer(t *testing.T){
	f := kafka.NewFactory()
	_, command := config.Viperize(f.AddFlags)

	err := command.ParseFlags([]string{
		"--kafka.consumer.topic=jaeger-spans",
		"--kafka.consumer.brokers=127.0.0.1:9092",
		"--kafka.consumer.encoding=protobuf",
		"--kafka.consumer.group-id=jaeger-ingester",
		"--kafka.consumer.client-id=jaeger-ingester",
		"--ingester.parallelism",
		"1000",
	})
	require.NoError(t, err)
	//logger := zaptest.NewLogger(t, zaptest.WrapOptions(zap.AddCaller()))
	// options := app.Options{
	// 	Configuration:  Configuration{
	// 		InitialOffset: sarama.OffsetOldest,
	// 	},
	// }
	// options.InitFromViper(v)

} 
func TestSetConfiguration(t *testing.T) {
	logger, _ := zap.NewDevelopment()
	saramaConfig := sarama.NewConfig()
	configPrefix := "kafka.auth"
	flagSet := flag.NewFlagSet("flags", flag.ContinueOnError)
	AddFlags(configPrefix, flagSet)
	command := &cobra.Command{}
	command.Flags().AddGoFlagSet(flagSet)
	v := viper.New()
	v.AutomaticEnv()
	v.SetEnvKeyReplacer(strings.NewReplacer("-", "_", ".", "_"))
	v.BindPFlags(command.Flags())

	authConfig := &AuthenticationConfig{}

	// Helper function to parse flags and initialize authConfig
	parseFlagsAndInit := func(authType string) {
		command.ParseFlags([]string{
			"--kafka.auth.authentication=" + authType,
			"--kafka.auth.kerberos.service-name=kafka",
			"--kafka.auth.kerberos.realm=EXAMPLE.COM",
			"--kafka.auth.kerberos.use-keytab=true",
			"--kafka.auth.kerberos.username=user",
			"--kafka.auth.kerberos.password=password",
			"--kafka.auth.kerberos.config-file=/path/to/krb5.conf",
			"--kafka.auth.kerberos.keytab-file=/path/to/keytab",
			"--kafka.auth.kerberos.disable-fast-negotiation=true",
			"--kafka.auth.tls.enabled=false",
			"--kafka.auth.plaintext.username=user",
			"--kafka.auth.plaintext.password=password",
			"--kafka.auth.plaintext.mechanism=SCRAM-SHA-256",
			"--kafka.auth.kerberos.use-keytab=false",
		})
		authConfig = &AuthenticationConfig{}
		err := authConfig.InitFromViper(configPrefix, v)
		require.NoError(t, err)
	}

	// Test with invalid authentication method
	parseFlagsAndInit("fail")
	require.Error(t, authConfig.SetConfiguration(saramaConfig, logger), "Unknown/Unsupported authentication method fail to kafka cluster")

	
}
