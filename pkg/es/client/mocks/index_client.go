// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	client "github.com/jaegertracing/jaeger/pkg/es/client"
	mock "github.com/stretchr/testify/mock"
)

// MockIndexAPI is an autogenerated mock type for the IndexAPI type
type MockIndexAPI struct {
	mock.Mock
}

// CreateAlias provides a mock function with given fields: aliases
func (_m *MockIndexAPI) CreateAlias(aliases []client.Alias) error {
	ret := _m.Called(aliases)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]client.Alias) error); ok {
		r0 = rf(aliases)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateIndex provides a mock function with given fields: index
func (_m *MockIndexAPI) CreateIndex(index string) error {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTemplate provides a mock function with given fields: template, name
func (_m *MockIndexAPI) CreateTemplate(template string, name string) error {
	ret := _m.Called(template, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(template, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAlias provides a mock function with given fields: aliases
func (_m *MockIndexAPI) DeleteAlias(aliases []client.Alias) error {
	ret := _m.Called(aliases)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]client.Alias) error); ok {
		r0 = rf(aliases)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIndices provides a mock function with given fields: indices
func (_m *MockIndexAPI) DeleteIndices(indices []client.Index) error {
	ret := _m.Called(indices)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]client.Index) error); ok {
		r0 = rf(indices)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetJaegerIndices provides a mock function with given fields: prefix
func (_m *MockIndexAPI) GetJaegerIndices(prefix string) ([]client.Index, error) {
	ret := _m.Called(prefix)

	if len(ret) == 0 {
		panic("no return value specified for GetJaegerIndices")
	}

	var r0 []client.Index
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]client.Index, error)); ok {
		return rf(prefix)
	}
	if rf, ok := ret.Get(0).(func(string) []client.Index); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Index)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollover provides a mock function with given fields: rolloverTarget, conditions
func (_m *MockIndexAPI) Rollover(rolloverTarget string, conditions map[string]interface{}) error {
	ret := _m.Called(rolloverTarget, conditions)

	if len(ret) == 0 {
		panic("no return value specified for Rollover")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(rolloverTarget, conditions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockIndexAPI creates a new instance of MockIndexAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIndexAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIndexAPI {
	mock := &MockIndexAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
