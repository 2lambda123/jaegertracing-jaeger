// @generated Code generated by thrift-gen. Do not modify.

// Package throttling is generated code used to make or handle TChannel calls using Thrift.
package throttling

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

// TChanThrottlingService is the interface that defines the server handler and client interface.
type TChanThrottlingService interface {
	GetThrottlingConfigs(ctx thrift.Context, serviceNames []string) (*ThrottlingResponse, error)
}

// Implementation of a client and service handler.

type tchanThrottlingServiceClient struct {
	thriftService string
	client        thrift.TChanClient
}

func NewTChanThrottlingServiceInheritedClient(thriftService string, client thrift.TChanClient) *tchanThrottlingServiceClient {
	return &tchanThrottlingServiceClient{
		thriftService,
		client,
	}
}

// NewTChanThrottlingServiceClient creates a client that can be used to make remote calls.
func NewTChanThrottlingServiceClient(client thrift.TChanClient) TChanThrottlingService {
	return NewTChanThrottlingServiceInheritedClient("ThrottlingService", client)
}

func (c *tchanThrottlingServiceClient) GetThrottlingConfigs(ctx thrift.Context, serviceNames []string) (*ThrottlingResponse, error) {
	var resp ThrottlingServiceGetThrottlingConfigsResult
	args := ThrottlingServiceGetThrottlingConfigsArgs{
		ServiceNames: serviceNames,
	}
	success, err := c.client.Call(ctx, c.thriftService, "getThrottlingConfigs", &args, &resp)
	if err == nil && !success {
		switch {
		default:
			err = fmt.Errorf("received no result or unknown exception for getThrottlingConfigs")
		}
	}

	return resp.GetSuccess(), err
}

type tchanThrottlingServiceServer struct {
	handler TChanThrottlingService
}

// NewTChanThrottlingServiceServer wraps a handler for TChanThrottlingService so it can be
// registered with a thrift.Server.
func NewTChanThrottlingServiceServer(handler TChanThrottlingService) thrift.TChanServer {
	return &tchanThrottlingServiceServer{
		handler,
	}
}

func (s *tchanThrottlingServiceServer) Service() string {
	return "ThrottlingService"
}

func (s *tchanThrottlingServiceServer) Methods() []string {
	return []string{
		"getThrottlingConfigs",
	}
}

func (s *tchanThrottlingServiceServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "getThrottlingConfigs":
		return s.handleGetThrottlingConfigs(ctx, protocol)

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanThrottlingServiceServer) handleGetThrottlingConfigs(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req ThrottlingServiceGetThrottlingConfigsArgs
	var res ThrottlingServiceGetThrottlingConfigsResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.GetThrottlingConfigs(ctx, req.ServiceNames)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}
