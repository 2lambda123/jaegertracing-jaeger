// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package throttling

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - MaxOperations
//  - CreditsPerSecond
//  - MaxBalance
type ThrottlingConfig struct {
	MaxOperations    int32   `thrift:"maxOperations,1,required" json:"maxOperations"`
	CreditsPerSecond float64 `thrift:"creditsPerSecond,2,required" json:"creditsPerSecond"`
	MaxBalance       float64 `thrift:"maxBalance,3,required" json:"maxBalance"`
}

func NewThrottlingConfig() *ThrottlingConfig {
	return &ThrottlingConfig{}
}

func (p *ThrottlingConfig) GetMaxOperations() int32 {
	return p.MaxOperations
}

func (p *ThrottlingConfig) GetCreditsPerSecond() float64 {
	return p.CreditsPerSecond
}

func (p *ThrottlingConfig) GetMaxBalance() float64 {
	return p.MaxBalance
}
func (p *ThrottlingConfig) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMaxOperations bool = false
	var issetCreditsPerSecond bool = false
	var issetMaxBalance bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMaxOperations = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetCreditsPerSecond = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetMaxBalance = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMaxOperations {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxOperations is not set"))
	}
	if !issetCreditsPerSecond {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreditsPerSecond is not set"))
	}
	if !issetMaxBalance {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxBalance is not set"))
	}
	return nil
}

func (p *ThrottlingConfig) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaxOperations = v
	}
	return nil
}

func (p *ThrottlingConfig) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CreditsPerSecond = v
	}
	return nil
}

func (p *ThrottlingConfig) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxBalance = v
	}
	return nil
}

func (p *ThrottlingConfig) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ThrottlingConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThrottlingConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxOperations", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maxOperations: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxOperations)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxOperations (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maxOperations: ", p), err)
	}
	return err
}

func (p *ThrottlingConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creditsPerSecond", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:creditsPerSecond: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.CreditsPerSecond)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creditsPerSecond (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:creditsPerSecond: ", p), err)
	}
	return err
}

func (p *ThrottlingConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxBalance", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxBalance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.MaxBalance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxBalance (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxBalance: ", p), err)
	}
	return err
}

func (p *ThrottlingConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThrottlingConfig(%+v)", *p)
}

// Attributes:
//  - ServiceName
//  - Config
type ServiceThrottlingConfig struct {
	ServiceName string            `thrift:"serviceName,1,required" json:"serviceName"`
	Config      *ThrottlingConfig `thrift:"config,2,required" json:"config"`
}

func NewServiceThrottlingConfig() *ServiceThrottlingConfig {
	return &ServiceThrottlingConfig{}
}

func (p *ServiceThrottlingConfig) GetServiceName() string {
	return p.ServiceName
}

var ServiceThrottlingConfig_Config_DEFAULT *ThrottlingConfig

func (p *ServiceThrottlingConfig) GetConfig() *ThrottlingConfig {
	if !p.IsSetConfig() {
		return ServiceThrottlingConfig_Config_DEFAULT
	}
	return p.Config
}
func (p *ServiceThrottlingConfig) IsSetConfig() bool {
	return p.Config != nil
}

func (p *ServiceThrottlingConfig) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetServiceName bool = false
	var issetConfig bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetServiceName = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetConfig = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetServiceName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"))
	}
	if !issetConfig {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Config is not set"))
	}
	return nil
}

func (p *ServiceThrottlingConfig) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *ServiceThrottlingConfig) readField2(iprot thrift.TProtocol) error {
	p.Config = &ThrottlingConfig{}
	if err := p.Config.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
	}
	return nil
}

func (p *ServiceThrottlingConfig) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServiceThrottlingConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceThrottlingConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err)
	}
	return err
}

func (p *ServiceThrottlingConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("config", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:config: ", p), err)
	}
	if err := p.Config.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:config: ", p), err)
	}
	return err
}

func (p *ServiceThrottlingConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceThrottlingConfig(%+v)", *p)
}

// Attributes:
//  - DefaultConfig
//  - ServiceConfigs
type ThrottlingResponse struct {
	DefaultConfig  *ThrottlingConfig          `thrift:"defaultConfig,1,required" json:"defaultConfig"`
	ServiceConfigs []*ServiceThrottlingConfig `thrift:"serviceConfigs,2,required" json:"serviceConfigs"`
}

func NewThrottlingResponse() *ThrottlingResponse {
	return &ThrottlingResponse{}
}

var ThrottlingResponse_DefaultConfig_DEFAULT *ThrottlingConfig

func (p *ThrottlingResponse) GetDefaultConfig() *ThrottlingConfig {
	if !p.IsSetDefaultConfig() {
		return ThrottlingResponse_DefaultConfig_DEFAULT
	}
	return p.DefaultConfig
}

func (p *ThrottlingResponse) GetServiceConfigs() []*ServiceThrottlingConfig {
	return p.ServiceConfigs
}
func (p *ThrottlingResponse) IsSetDefaultConfig() bool {
	return p.DefaultConfig != nil
}

func (p *ThrottlingResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetDefaultConfig bool = false
	var issetServiceConfigs bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetDefaultConfig = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetServiceConfigs = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetDefaultConfig {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DefaultConfig is not set"))
	}
	if !issetServiceConfigs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceConfigs is not set"))
	}
	return nil
}

func (p *ThrottlingResponse) readField1(iprot thrift.TProtocol) error {
	p.DefaultConfig = &ThrottlingConfig{}
	if err := p.DefaultConfig.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultConfig), err)
	}
	return nil
}

func (p *ThrottlingResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ServiceThrottlingConfig, 0, size)
	p.ServiceConfigs = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &ServiceThrottlingConfig{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.ServiceConfigs = append(p.ServiceConfigs, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ThrottlingResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ThrottlingResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThrottlingResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("defaultConfig", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:defaultConfig: ", p), err)
	}
	if err := p.DefaultConfig.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultConfig), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:defaultConfig: ", p), err)
	}
	return err
}

func (p *ThrottlingResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceConfigs", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceConfigs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ServiceConfigs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ServiceConfigs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceConfigs: ", p), err)
	}
	return err
}

func (p *ThrottlingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThrottlingResponse(%+v)", *p)
}
