name: Build all-in-one

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ (github.event.pull_request && github.event.pull_request.number) || github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  all-in-one:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mode:
          - name: v1
            binary: all-in-one
            skip_sampling: false
          - name: v2
            binary: jaeger
            skip_sampling: true

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout repository
        uses: actions/checkout@v4.1.2
        with:
          submodules: true

      - name: Fetch git tags
        run: git fetch --prune --unshallow --tags

      - name: Setup Go
        uses: actions/setup-go@v5.0.0
        with:
          go-version: 1.22.x

      - name: Setup Node.js version
        uses: ./.github/actions/setup-node.js

      - name: Export BRANCH variable
        uses: ./.github/actions/setup-branch

      - name: Install tools
        run: make install-ci

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3.0.0

      - name: Define PR_ONLY var if running on a Pull Request
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR_ONLY=pr-only" >> $GITHUB_ENV
          else
            echo "PR_ONLY=" >> $GITHUB_ENV
          fi

      - name: Build, test, and publish all-in-one image
        run: |
          BINARY=${{ matrix.mode.binary }} \
          SKIP_SAMPLING=${{ matrix.mode.skip_sampling }} \
          bash scripts/build-all-in-one-image.sh ${{ env.PR_ONLY }}
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}

      - name: Start Docker Compose services
        run: docker-compose -f docker-compose/monitor/docker-compose.yml up -d

      - name: Wait for Jaeger UI to be up
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:16686; then
              echo "Jaeger UI is accessible"
              break
            fi
            echo "Waiting for Jaeger UI..."
            sleep 2
          done
          if ! curl -f http://localhost:16686; then
            echo "Jaeger UI is not accessible after waiting"
            docker-compose -f docker-compose/monitor/docker-compose.yml logs jaeger
            docker-compose -f docker-compose/monitor/docker-compose.yml down
            exit 1
          fi

      - name: Wait for Prometheus to be up
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:9090; then
              echo "Prometheus is accessible"
              break
            fi
            echo "Waiting for Prometheus..."
            sleep 2
          done
          if ! curl -f http://localhost:9090; then
            echo "Prometheus is not accessible after waiting"
            docker-compose -f docker-compose/monitor/docker-compose.yml logs prometheus
            docker-compose -f docker-compose/monitor/docker-compose.yml down
            exit 1
          fi

      - name: Wait for Grafana to be up
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3000; then
              echo "Grafana is accessible"
              break
            fi
            echo "Waiting for Grafana..."
            sleep 2
          done
          if ! curl -f http://localhost:3000; then
            echo "Grafana is not accessible after waiting"
            docker-compose -f docker-compose/monitor/docker-compose.yml logs grafana
            docker-compose -f docker-compose/monitor/docker-compose.yml down
            exit 1
          fi

      - name: Verify Jaeger SPM functionality
        run: |
          for i in {1..30}; do
            response=$(curl -s http://localhost:16686/api/metrics/spans?service=jaeger-query)
            if [[ $response == *"metrics"* ]]; then
              echo "Jaeger SPM is returning metrics"
              break
            fi
            echo "Waiting for Jaeger SPM metrics..."
            sleep 2
          done
          response=$(curl -s http://localhost:16686/api/metrics/spans?service=jaeger-query)
          if [[ $response != *"metrics"* ]]; then
            echo "Jaeger SPM is not returning metrics after waiting"
            docker-compose -f docker-compose/monitor/docker-compose.yml logs jaeger
            docker-compose -f docker-compose/monitor/docker-compose.yml down
            exit 1
          fi

      - name: Smoke tests passed
        run: echo "Smoke tests passed successfully"

      - name: Shut down Docker Compose services
        run: docker-compose -f docker-compose/monitor/docker-compose.yml down
