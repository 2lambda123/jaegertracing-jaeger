// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api_v2.proto

/*
	Package api_v2 is a generated protocol buffer package.

	It is generated from these files:
		api_v2.proto

	It has these top-level messages:
		PostSpansRequest
		PostSpansResponse
		ProbabilisticSamplingStrategy
		RateLimitingSamplingStrategy
		OperationSamplingStrategy
		PerOperationSamplingStrategies
		SamplingStrategyResponse
		SamplingStrategyParameters
*/
package api_v2

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import jaeger_api_v2 "github.com/jaegertracing/jaeger/model"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SamplingStrategyType int32

const (
	SamplingStrategyType_PROBABILISTIC SamplingStrategyType = 0
	SamplingStrategyType_RATE_LIMITING SamplingStrategyType = 1
)

var SamplingStrategyType_name = map[int32]string{
	0: "PROBABILISTIC",
	1: "RATE_LIMITING",
}
var SamplingStrategyType_value = map[string]int32{
	"PROBABILISTIC": 0,
	"RATE_LIMITING": 1,
}

func (x SamplingStrategyType) String() string {
	return proto.EnumName(SamplingStrategyType_name, int32(x))
}
func (SamplingStrategyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApiV2, []int{0} }

type PostSpansRequest struct {
	Batch jaeger_api_v2.Batch `protobuf:"bytes,1,opt,name=batch" json:"batch"`
}

func (m *PostSpansRequest) Reset()                    { *m = PostSpansRequest{} }
func (m *PostSpansRequest) String() string            { return proto.CompactTextString(m) }
func (*PostSpansRequest) ProtoMessage()               {}
func (*PostSpansRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiV2, []int{0} }

func (m *PostSpansRequest) GetBatch() jaeger_api_v2.Batch {
	if m != nil {
		return m.Batch
	}
	return jaeger_api_v2.Batch{}
}

type PostSpansResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *PostSpansResponse) Reset()                    { *m = PostSpansResponse{} }
func (m *PostSpansResponse) String() string            { return proto.CompactTextString(m) }
func (*PostSpansResponse) ProtoMessage()               {}
func (*PostSpansResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiV2, []int{1} }

func (m *PostSpansResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ProbabilisticSamplingStrategy struct {
	SamplingRate float64 `protobuf:"fixed64,1,opt,name=samplingRate,proto3" json:"samplingRate,omitempty"`
}

func (m *ProbabilisticSamplingStrategy) Reset()         { *m = ProbabilisticSamplingStrategy{} }
func (m *ProbabilisticSamplingStrategy) String() string { return proto.CompactTextString(m) }
func (*ProbabilisticSamplingStrategy) ProtoMessage()    {}
func (*ProbabilisticSamplingStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptorApiV2, []int{2}
}

func (m *ProbabilisticSamplingStrategy) GetSamplingRate() float64 {
	if m != nil {
		return m.SamplingRate
	}
	return 0
}

type RateLimitingSamplingStrategy struct {
	MaxTracesPerSecond int32 `protobuf:"varint,1,opt,name=maxTracesPerSecond,proto3" json:"maxTracesPerSecond,omitempty"`
}

func (m *RateLimitingSamplingStrategy) Reset()         { *m = RateLimitingSamplingStrategy{} }
func (m *RateLimitingSamplingStrategy) String() string { return proto.CompactTextString(m) }
func (*RateLimitingSamplingStrategy) ProtoMessage()    {}
func (*RateLimitingSamplingStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptorApiV2, []int{3}
}

func (m *RateLimitingSamplingStrategy) GetMaxTracesPerSecond() int32 {
	if m != nil {
		return m.MaxTracesPerSecond
	}
	return 0
}

type OperationSamplingStrategy struct {
	Operation             string                         `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	ProbabilisticSampling *ProbabilisticSamplingStrategy `protobuf:"bytes,2,opt,name=probabilisticSampling" json:"probabilisticSampling,omitempty"`
}

func (m *OperationSamplingStrategy) Reset()                    { *m = OperationSamplingStrategy{} }
func (m *OperationSamplingStrategy) String() string            { return proto.CompactTextString(m) }
func (*OperationSamplingStrategy) ProtoMessage()               {}
func (*OperationSamplingStrategy) Descriptor() ([]byte, []int) { return fileDescriptorApiV2, []int{4} }

func (m *OperationSamplingStrategy) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *OperationSamplingStrategy) GetProbabilisticSampling() *ProbabilisticSamplingStrategy {
	if m != nil {
		return m.ProbabilisticSampling
	}
	return nil
}

type PerOperationSamplingStrategies struct {
	DefaultSamplingProbability       float64                      `protobuf:"fixed64,1,opt,name=defaultSamplingProbability,proto3" json:"defaultSamplingProbability,omitempty"`
	DefaultLowerBoundTracesPerSecond float64                      `protobuf:"fixed64,2,opt,name=defaultLowerBoundTracesPerSecond,proto3" json:"defaultLowerBoundTracesPerSecond,omitempty"`
	PerOperationStrategies           []*OperationSamplingStrategy `protobuf:"bytes,3,rep,name=perOperationStrategies" json:"perOperationStrategies,omitempty"`
	DefaultUpperBoundTracesPerSecond float64                      `protobuf:"fixed64,4,opt,name=defaultUpperBoundTracesPerSecond,proto3" json:"defaultUpperBoundTracesPerSecond,omitempty"`
}

func (m *PerOperationSamplingStrategies) Reset()         { *m = PerOperationSamplingStrategies{} }
func (m *PerOperationSamplingStrategies) String() string { return proto.CompactTextString(m) }
func (*PerOperationSamplingStrategies) ProtoMessage()    {}
func (*PerOperationSamplingStrategies) Descriptor() ([]byte, []int) {
	return fileDescriptorApiV2, []int{5}
}

func (m *PerOperationSamplingStrategies) GetDefaultSamplingProbability() float64 {
	if m != nil {
		return m.DefaultSamplingProbability
	}
	return 0
}

func (m *PerOperationSamplingStrategies) GetDefaultLowerBoundTracesPerSecond() float64 {
	if m != nil {
		return m.DefaultLowerBoundTracesPerSecond
	}
	return 0
}

func (m *PerOperationSamplingStrategies) GetPerOperationStrategies() []*OperationSamplingStrategy {
	if m != nil {
		return m.PerOperationStrategies
	}
	return nil
}

func (m *PerOperationSamplingStrategies) GetDefaultUpperBoundTracesPerSecond() float64 {
	if m != nil {
		return m.DefaultUpperBoundTracesPerSecond
	}
	return 0
}

type SamplingStrategyResponse struct {
	StrategyType          SamplingStrategyType            `protobuf:"varint,1,opt,name=strategyType,proto3,enum=jaeger.api_v2.SamplingStrategyType" json:"strategyType,omitempty"`
	ProbabilisticSampling *ProbabilisticSamplingStrategy  `protobuf:"bytes,2,opt,name=probabilisticSampling" json:"probabilisticSampling,omitempty"`
	RateLimitingSampling  *RateLimitingSamplingStrategy   `protobuf:"bytes,3,opt,name=rateLimitingSampling" json:"rateLimitingSampling,omitempty"`
	OperationSampling     *PerOperationSamplingStrategies `protobuf:"bytes,4,opt,name=operationSampling" json:"operationSampling,omitempty"`
}

func (m *SamplingStrategyResponse) Reset()                    { *m = SamplingStrategyResponse{} }
func (m *SamplingStrategyResponse) String() string            { return proto.CompactTextString(m) }
func (*SamplingStrategyResponse) ProtoMessage()               {}
func (*SamplingStrategyResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiV2, []int{6} }

func (m *SamplingStrategyResponse) GetStrategyType() SamplingStrategyType {
	if m != nil {
		return m.StrategyType
	}
	return SamplingStrategyType_PROBABILISTIC
}

func (m *SamplingStrategyResponse) GetProbabilisticSampling() *ProbabilisticSamplingStrategy {
	if m != nil {
		return m.ProbabilisticSampling
	}
	return nil
}

func (m *SamplingStrategyResponse) GetRateLimitingSampling() *RateLimitingSamplingStrategy {
	if m != nil {
		return m.RateLimitingSampling
	}
	return nil
}

func (m *SamplingStrategyResponse) GetOperationSampling() *PerOperationSamplingStrategies {
	if m != nil {
		return m.OperationSampling
	}
	return nil
}

type SamplingStrategyParameters struct {
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
}

func (m *SamplingStrategyParameters) Reset()                    { *m = SamplingStrategyParameters{} }
func (m *SamplingStrategyParameters) String() string            { return proto.CompactTextString(m) }
func (*SamplingStrategyParameters) ProtoMessage()               {}
func (*SamplingStrategyParameters) Descriptor() ([]byte, []int) { return fileDescriptorApiV2, []int{7} }

func (m *SamplingStrategyParameters) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func init() {
	proto.RegisterType((*PostSpansRequest)(nil), "jaeger.api_v2.PostSpansRequest")
	golang_proto.RegisterType((*PostSpansRequest)(nil), "jaeger.api_v2.PostSpansRequest")
	proto.RegisterType((*PostSpansResponse)(nil), "jaeger.api_v2.PostSpansResponse")
	golang_proto.RegisterType((*PostSpansResponse)(nil), "jaeger.api_v2.PostSpansResponse")
	proto.RegisterType((*ProbabilisticSamplingStrategy)(nil), "jaeger.api_v2.ProbabilisticSamplingStrategy")
	golang_proto.RegisterType((*ProbabilisticSamplingStrategy)(nil), "jaeger.api_v2.ProbabilisticSamplingStrategy")
	proto.RegisterType((*RateLimitingSamplingStrategy)(nil), "jaeger.api_v2.RateLimitingSamplingStrategy")
	golang_proto.RegisterType((*RateLimitingSamplingStrategy)(nil), "jaeger.api_v2.RateLimitingSamplingStrategy")
	proto.RegisterType((*OperationSamplingStrategy)(nil), "jaeger.api_v2.OperationSamplingStrategy")
	golang_proto.RegisterType((*OperationSamplingStrategy)(nil), "jaeger.api_v2.OperationSamplingStrategy")
	proto.RegisterType((*PerOperationSamplingStrategies)(nil), "jaeger.api_v2.PerOperationSamplingStrategies")
	golang_proto.RegisterType((*PerOperationSamplingStrategies)(nil), "jaeger.api_v2.PerOperationSamplingStrategies")
	proto.RegisterType((*SamplingStrategyResponse)(nil), "jaeger.api_v2.SamplingStrategyResponse")
	golang_proto.RegisterType((*SamplingStrategyResponse)(nil), "jaeger.api_v2.SamplingStrategyResponse")
	proto.RegisterType((*SamplingStrategyParameters)(nil), "jaeger.api_v2.SamplingStrategyParameters")
	golang_proto.RegisterType((*SamplingStrategyParameters)(nil), "jaeger.api_v2.SamplingStrategyParameters")
	proto.RegisterEnum("jaeger.api_v2.SamplingStrategyType", SamplingStrategyType_name, SamplingStrategyType_value)
	golang_proto.RegisterEnum("jaeger.api_v2.SamplingStrategyType", SamplingStrategyType_name, SamplingStrategyType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CollectorService service

type CollectorServiceClient interface {
	PostSpans(ctx context.Context, in *PostSpansRequest, opts ...grpc.CallOption) (*PostSpansResponse, error)
}

type collectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCollectorServiceClient(cc *grpc.ClientConn) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) PostSpans(ctx context.Context, in *PostSpansRequest, opts ...grpc.CallOption) (*PostSpansResponse, error) {
	out := new(PostSpansResponse)
	err := grpc.Invoke(ctx, "/jaeger.api_v2.CollectorService/PostSpans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CollectorService service

type CollectorServiceServer interface {
	PostSpans(context.Context, *PostSpansRequest) (*PostSpansResponse, error)
}

func RegisterCollectorServiceServer(s *grpc.Server, srv CollectorServiceServer) {
	s.RegisterService(&_CollectorService_serviceDesc, srv)
}

func _CollectorService_PostSpans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSpansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).PostSpans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.CollectorService/PostSpans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).PostSpans(ctx, req.(*PostSpansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.api_v2.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostSpans",
			Handler:    _CollectorService_PostSpans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_v2.proto",
}

// Client API for SamplingManager service

type SamplingManagerClient interface {
	GetSamplingStrategy(ctx context.Context, in *SamplingStrategyParameters, opts ...grpc.CallOption) (*SamplingStrategyResponse, error)
}

type samplingManagerClient struct {
	cc *grpc.ClientConn
}

func NewSamplingManagerClient(cc *grpc.ClientConn) SamplingManagerClient {
	return &samplingManagerClient{cc}
}

func (c *samplingManagerClient) GetSamplingStrategy(ctx context.Context, in *SamplingStrategyParameters, opts ...grpc.CallOption) (*SamplingStrategyResponse, error) {
	out := new(SamplingStrategyResponse)
	err := grpc.Invoke(ctx, "/jaeger.api_v2.SamplingManager/GetSamplingStrategy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SamplingManager service

type SamplingManagerServer interface {
	GetSamplingStrategy(context.Context, *SamplingStrategyParameters) (*SamplingStrategyResponse, error)
}

func RegisterSamplingManagerServer(s *grpc.Server, srv SamplingManagerServer) {
	s.RegisterService(&_SamplingManager_serviceDesc, srv)
}

func _SamplingManager_GetSamplingStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SamplingStrategyParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplingManagerServer).GetSamplingStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.SamplingManager/GetSamplingStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplingManagerServer).GetSamplingStrategy(ctx, req.(*SamplingStrategyParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _SamplingManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.api_v2.SamplingManager",
	HandlerType: (*SamplingManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSamplingStrategy",
			Handler:    _SamplingManager_GetSamplingStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_v2.proto",
}

func (m *PostSpansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostSpansRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApiV2(dAtA, i, uint64(m.Batch.Size()))
	n1, err := m.Batch.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *PostSpansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostSpansResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ProbabilisticSamplingStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProbabilisticSamplingStrategy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SamplingRate != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SamplingRate))))
		i += 8
	}
	return i, nil
}

func (m *RateLimitingSamplingStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitingSamplingStrategy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxTracesPerSecond != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApiV2(dAtA, i, uint64(m.MaxTracesPerSecond))
	}
	return i, nil
}

func (m *OperationSamplingStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationSamplingStrategy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Operation) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApiV2(dAtA, i, uint64(len(m.Operation)))
		i += copy(dAtA[i:], m.Operation)
	}
	if m.ProbabilisticSampling != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApiV2(dAtA, i, uint64(m.ProbabilisticSampling.Size()))
		n2, err := m.ProbabilisticSampling.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PerOperationSamplingStrategies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerOperationSamplingStrategies) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DefaultSamplingProbability != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DefaultSamplingProbability))))
		i += 8
	}
	if m.DefaultLowerBoundTracesPerSecond != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DefaultLowerBoundTracesPerSecond))))
		i += 8
	}
	if len(m.PerOperationStrategies) > 0 {
		for _, msg := range m.PerOperationStrategies {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApiV2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DefaultUpperBoundTracesPerSecond != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DefaultUpperBoundTracesPerSecond))))
		i += 8
	}
	return i, nil
}

func (m *SamplingStrategyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SamplingStrategyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StrategyType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApiV2(dAtA, i, uint64(m.StrategyType))
	}
	if m.ProbabilisticSampling != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApiV2(dAtA, i, uint64(m.ProbabilisticSampling.Size()))
		n3, err := m.ProbabilisticSampling.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.RateLimitingSampling != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApiV2(dAtA, i, uint64(m.RateLimitingSampling.Size()))
		n4, err := m.RateLimitingSampling.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.OperationSampling != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApiV2(dAtA, i, uint64(m.OperationSampling.Size()))
		n5, err := m.OperationSampling.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *SamplingStrategyParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SamplingStrategyParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApiV2(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	return i, nil
}

func encodeVarintApiV2(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PostSpansRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Batch.Size()
	n += 1 + l + sovApiV2(uint64(l))
	return n
}

func (m *PostSpansResponse) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func (m *ProbabilisticSamplingStrategy) Size() (n int) {
	var l int
	_ = l
	if m.SamplingRate != 0 {
		n += 9
	}
	return n
}

func (m *RateLimitingSamplingStrategy) Size() (n int) {
	var l int
	_ = l
	if m.MaxTracesPerSecond != 0 {
		n += 1 + sovApiV2(uint64(m.MaxTracesPerSecond))
	}
	return n
}

func (m *OperationSamplingStrategy) Size() (n int) {
	var l int
	_ = l
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovApiV2(uint64(l))
	}
	if m.ProbabilisticSampling != nil {
		l = m.ProbabilisticSampling.Size()
		n += 1 + l + sovApiV2(uint64(l))
	}
	return n
}

func (m *PerOperationSamplingStrategies) Size() (n int) {
	var l int
	_ = l
	if m.DefaultSamplingProbability != 0 {
		n += 9
	}
	if m.DefaultLowerBoundTracesPerSecond != 0 {
		n += 9
	}
	if len(m.PerOperationStrategies) > 0 {
		for _, e := range m.PerOperationStrategies {
			l = e.Size()
			n += 1 + l + sovApiV2(uint64(l))
		}
	}
	if m.DefaultUpperBoundTracesPerSecond != 0 {
		n += 9
	}
	return n
}

func (m *SamplingStrategyResponse) Size() (n int) {
	var l int
	_ = l
	if m.StrategyType != 0 {
		n += 1 + sovApiV2(uint64(m.StrategyType))
	}
	if m.ProbabilisticSampling != nil {
		l = m.ProbabilisticSampling.Size()
		n += 1 + l + sovApiV2(uint64(l))
	}
	if m.RateLimitingSampling != nil {
		l = m.RateLimitingSampling.Size()
		n += 1 + l + sovApiV2(uint64(l))
	}
	if m.OperationSampling != nil {
		l = m.OperationSampling.Size()
		n += 1 + l + sovApiV2(uint64(l))
	}
	return n
}

func (m *SamplingStrategyParameters) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovApiV2(uint64(l))
	}
	return n
}

func sovApiV2(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApiV2(x uint64) (n int) {
	return sovApiV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PostSpansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostSpansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostSpansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiV2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostSpansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostSpansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostSpansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApiV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProbabilisticSamplingStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProbabilisticSamplingStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProbabilisticSamplingStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplingRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SamplingRate = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApiV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitingSamplingStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitingSamplingStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitingSamplingStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTracesPerSecond", wireType)
			}
			m.MaxTracesPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTracesPerSecond |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationSamplingStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationSamplingStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationSamplingStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbabilisticSampling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiV2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProbabilisticSampling == nil {
				m.ProbabilisticSampling = &ProbabilisticSamplingStrategy{}
			}
			if err := m.ProbabilisticSampling.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerOperationSamplingStrategies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerOperationSamplingStrategies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerOperationSamplingStrategies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSamplingProbability", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DefaultSamplingProbability = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLowerBoundTracesPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DefaultLowerBoundTracesPerSecond = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerOperationStrategies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiV2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PerOperationStrategies = append(m.PerOperationStrategies, &OperationSamplingStrategy{})
			if err := m.PerOperationStrategies[len(m.PerOperationStrategies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultUpperBoundTracesPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DefaultUpperBoundTracesPerSecond = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApiV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SamplingStrategyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SamplingStrategyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SamplingStrategyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyType", wireType)
			}
			m.StrategyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrategyType |= (SamplingStrategyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbabilisticSampling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiV2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProbabilisticSampling == nil {
				m.ProbabilisticSampling = &ProbabilisticSamplingStrategy{}
			}
			if err := m.ProbabilisticSampling.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitingSampling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiV2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimitingSampling == nil {
				m.RateLimitingSampling = &RateLimitingSamplingStrategy{}
			}
			if err := m.RateLimitingSampling.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationSampling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiV2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperationSampling == nil {
				m.OperationSampling = &PerOperationSamplingStrategies{}
			}
			if err := m.OperationSampling.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SamplingStrategyParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SamplingStrategyParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SamplingStrategyParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApiV2
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApiV2
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApiV2(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApiV2 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiV2   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api_v2.proto", fileDescriptorApiV2) }
func init() { golang_proto.RegisterFile("api_v2.proto", fileDescriptorApiV2) }

var fileDescriptorApiV2 = []byte{
	// 749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcf, 0x4f, 0xdb, 0x48,
	0x14, 0xc6, 0x0e, 0xa0, 0xe5, 0x05, 0xd8, 0x30, 0x9b, 0xdd, 0xcd, 0x46, 0x10, 0x22, 0x73, 0x80,
	0xcd, 0x82, 0xcd, 0xba, 0xea, 0x05, 0x55, 0x48, 0x09, 0xad, 0x50, 0x50, 0x80, 0xc8, 0x49, 0x2f,
	0xed, 0x81, 0x4e, 0x9c, 0xa9, 0xe3, 0x92, 0x78, 0xdc, 0x99, 0x49, 0x28, 0x52, 0x4f, 0x95, 0x7a,
	0xed, 0xa1, 0x3d, 0xf7, 0xd2, 0xbf, 0xa4, 0x47, 0x8e, 0x95, 0x7a, 0xeb, 0xa1, 0xaa, 0x68, 0xff,
	0x90, 0x2a, 0x63, 0x27, 0x24, 0xce, 0x0f, 0x6e, 0x3d, 0x8d, 0xf3, 0xde, 0x37, 0xdf, 0xfb, 0xde,
	0x37, 0x6f, 0x26, 0xb0, 0x88, 0x7d, 0xf7, 0xac, 0x63, 0xea, 0x3e, 0xa3, 0x82, 0xa2, 0xa5, 0x67,
	0x98, 0x38, 0x84, 0xe9, 0x41, 0x30, 0x1d, 0x6f, 0xd1, 0x3a, 0x69, 0x06, 0xb9, 0x74, 0xd2, 0xa1,
	0x0e, 0x95, 0x9f, 0x46, 0xf7, 0x2b, 0x8c, 0xae, 0x3a, 0x94, 0x3a, 0x4d, 0x62, 0x60, 0xdf, 0x35,
	0xb0, 0xe7, 0x51, 0x81, 0x85, 0x4b, 0x3d, 0x1e, 0x66, 0xb7, 0xe5, 0x62, 0xef, 0x38, 0xc4, 0xdb,
	0xe1, 0x17, 0xd8, 0x71, 0x08, 0x33, 0xa8, 0x2f, 0x11, 0xa3, 0x68, 0xed, 0x3e, 0x24, 0xca, 0x94,
	0x8b, 0x8a, 0x8f, 0x3d, 0x6e, 0x91, 0xe7, 0x6d, 0xc2, 0x05, 0xda, 0x85, 0xb9, 0x1a, 0x16, 0x76,
	0x23, 0xa5, 0x64, 0x95, 0xad, 0xb8, 0x99, 0xd4, 0x87, 0x14, 0xea, 0x85, 0x6e, 0xae, 0x30, 0x7b,
	0xf5, 0x75, 0x7d, 0xc6, 0x0a, 0x80, 0xda, 0x06, 0xac, 0x0c, 0xb0, 0x70, 0x9f, 0x7a, 0x9c, 0xa0,
	0x65, 0x50, 0xe9, 0xb9, 0xe4, 0xf8, 0xcd, 0x52, 0xe9, 0xb9, 0x76, 0x00, 0x6b, 0x65, 0x46, 0x6b,
	0xb8, 0xe6, 0x36, 0x5d, 0x2e, 0x5c, 0xbb, 0x82, 0x5b, 0x7e, 0xd3, 0xf5, 0x9c, 0x8a, 0x60, 0x58,
	0x10, 0xe7, 0x12, 0x69, 0xb0, 0xc8, 0xc3, 0x98, 0x85, 0x05, 0x91, 0x5b, 0x15, 0x6b, 0x28, 0xa6,
	0x9d, 0xc0, 0x6a, 0x77, 0x2d, 0xb9, 0x2d, 0x57, 0x74, 0xf7, 0x46, 0x39, 0x74, 0x40, 0x2d, 0xfc,
	0xa2, 0xca, 0xb0, 0x4d, 0x78, 0x99, 0xb0, 0x0a, 0xb1, 0xa9, 0x57, 0x97, 0x4c, 0x73, 0xd6, 0x98,
	0x8c, 0xf6, 0x5e, 0x81, 0x7f, 0x4e, 0x7d, 0xc2, 0xa4, 0x29, 0x23, 0x6c, 0xab, 0xb0, 0x40, 0x7b,
	0x49, 0x49, 0xb2, 0x60, 0xdd, 0x04, 0x50, 0x0d, 0xfe, 0xf4, 0xc7, 0x35, 0x94, 0x52, 0xa5, 0x6f,
	0xdb, 0x11, 0xdf, 0xa6, 0x36, 0x6f, 0x8d, 0xa7, 0xd2, 0xbe, 0xa8, 0x90, 0x29, 0x13, 0x36, 0x49,
	0xa2, 0x4b, 0x38, 0xda, 0x87, 0x74, 0x9d, 0x3c, 0xc5, 0xed, 0xa6, 0xe8, 0x25, 0xfb, 0x95, 0xc4,
	0x65, 0x68, 0xe2, 0x14, 0x04, 0x3a, 0x82, 0x6c, 0x98, 0x2d, 0xd1, 0x0b, 0xc2, 0x0a, 0xb4, 0xed,
	0xd5, 0xa3, 0x06, 0xaa, 0x92, 0xe5, 0x56, 0x1c, 0x7a, 0x02, 0x7f, 0xf9, 0x83, 0x6a, 0xfb, 0x2a,
	0x53, 0xb1, 0x6c, 0x6c, 0x2b, 0x6e, 0x6e, 0x45, 0x3c, 0x99, 0x68, 0xbd, 0x35, 0x81, 0x67, 0x40,
	0xed, 0x43, 0xdf, 0x9f, 0xa0, 0x76, 0x76, 0x48, 0xed, 0x44, 0x9c, 0xf6, 0x3a, 0x06, 0xa9, 0x91,
	0xc2, 0xbd, 0xf1, 0x3d, 0x84, 0x45, 0x1e, 0xc6, 0xaa, 0x97, 0x7e, 0x30, 0x8d, 0xcb, 0xe6, 0x46,
	0xa4, 0x81, 0xe8, 0xf6, 0x2e, 0xd4, 0x1a, 0xda, 0xf8, 0x2b, 0xc6, 0x04, 0x9d, 0x41, 0x92, 0x8d,
	0xb9, 0x16, 0xa9, 0x98, 0x2c, 0xf1, 0x5f, 0xa4, 0xc4, 0xb4, 0x1b, 0x64, 0x8d, 0x25, 0x42, 0x8f,
	0x61, 0x85, 0x46, 0xcf, 0x4a, 0xfa, 0x1c, 0x37, 0x77, 0xa2, 0x0d, 0x4c, 0x1d, 0x57, 0x6b, 0x94,
	0x47, 0xdb, 0x87, 0x74, 0x54, 0x46, 0x19, 0x33, 0xdc, 0x22, 0x82, 0x30, 0x8e, 0xb2, 0x10, 0xe7,
	0x84, 0x75, 0x5c, 0x9b, 0x9c, 0xe0, 0x16, 0x09, 0xaf, 0xe1, 0x60, 0x28, 0x77, 0x0f, 0x92, 0xe3,
	0xce, 0x01, 0xad, 0xc0, 0x52, 0xd9, 0x3a, 0x2d, 0xe4, 0x0b, 0xc5, 0x52, 0xb1, 0x52, 0x2d, 0x1e,
	0x24, 0x66, 0xba, 0x21, 0x2b, 0x5f, 0x7d, 0x70, 0x56, 0x2a, 0x1e, 0x17, 0xab, 0xc5, 0x93, 0xc3,
	0x84, 0x62, 0xbe, 0x84, 0xc4, 0x01, 0x6d, 0x36, 0x89, 0x2d, 0x28, 0xab, 0x04, 0xac, 0xa8, 0x01,
	0x0b, 0xfd, 0x07, 0x0d, 0xad, 0x47, 0x1b, 0x8c, 0x3c, 0x98, 0xe9, 0xec, 0x64, 0x40, 0x30, 0x4c,
	0x5a, 0xea, 0xd5, 0xe7, 0x1f, 0xef, 0x54, 0xa4, 0x2d, 0xc9, 0x47, 0xbb, 0x63, 0x1a, 0xbc, 0x9b,
	0xde, 0x53, 0x72, 0xe6, 0x07, 0x05, 0x7e, 0xef, 0x89, 0x3f, 0xc6, 0x1e, 0x76, 0x08, 0x43, 0x6f,
	0x14, 0xf8, 0xe3, 0x90, 0x88, 0x91, 0xe7, 0xe8, 0xdf, 0x5b, 0x86, 0xef, 0xc6, 0xb4, 0xf4, 0xe6,
	0x2d, 0xd0, 0xbe, 0xb2, 0x0d, 0xa9, 0x6c, 0x4d, 0x4b, 0xf5, 0x95, 0x45, 0x90, 0x7b, 0x4a, 0xae,
	0xd0, 0x79, 0x9b, 0x2f, 0xa0, 0x39, 0x33, 0xf6, 0xbf, 0xbe, 0x9b, 0x53, 0x15, 0x95, 0xdd, 0x05,
	0x38, 0x92, 0xf4, 0xd9, 0x7c, 0xb9, 0x88, 0x36, 0x1b, 0x42, 0xf8, 0x7c, 0xcf, 0x30, 0x1c, 0x57,
	0x34, 0xda, 0x35, 0xdd, 0xa6, 0x2d, 0x23, 0xa8, 0x2e, 0x18, 0xb6, 0x5d, 0xcf, 0x09, 0x7f, 0x5d,
	0x5d, 0x67, 0x94, 0x4f, 0xd7, 0x19, 0xe5, 0xdb, 0x75, 0x46, 0xf9, 0xf8, 0x3d, 0xa3, 0xc0, 0xdf,
	0x2e, 0xd5, 0x87, 0x80, 0xa1, 0xda, 0x47, 0xf3, 0xc1, 0x5a, 0x9b, 0x97, 0x7f, 0x52, 0x77, 0x7e,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x12, 0x15, 0x45, 0x35, 0x32, 0x07, 0x00, 0x00,
}
