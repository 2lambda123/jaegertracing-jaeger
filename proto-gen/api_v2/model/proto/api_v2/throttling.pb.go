// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model/proto/api_v2/throttling.proto

package api_v2

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ThrottlingConfig describes the throttling behavior for a given service.
// Throttling is controlled with a credit account per operation that is refilled
// at a steady rate, like a token bucket. The account may reach a maximum, but
// will not grow beyond that.
type ThrottlingConfig struct {
	// Max operations to track with individual throttling credit accounts.
	MaxOperations int32 `protobuf:"varint,1,opt,name=maxOperations,proto3" json:"maxOperations,omitempty"`
	// Number of credits to refill per second.
	CreditsPerSecond float64 `protobuf:"fixed64,2,opt,name=creditsPerSecond,proto3" json:"creditsPerSecond,omitempty"`
	// Max balance to cap credits.
	MaxBalance float64 `protobuf:"fixed64,3,opt,name=maxBalance,proto3" json:"maxBalance,omitempty"`
}

func (m *ThrottlingConfig) Reset()                    { *m = ThrottlingConfig{} }
func (m *ThrottlingConfig) String() string            { return proto.CompactTextString(m) }
func (*ThrottlingConfig) ProtoMessage()               {}
func (*ThrottlingConfig) Descriptor() ([]byte, []int) { return fileDescriptorThrottling, []int{0} }

func (m *ThrottlingConfig) GetMaxOperations() int32 {
	if m != nil {
		return m.MaxOperations
	}
	return 0
}

func (m *ThrottlingConfig) GetCreditsPerSecond() float64 {
	if m != nil {
		return m.CreditsPerSecond
	}
	return 0
}

func (m *ThrottlingConfig) GetMaxBalance() float64 {
	if m != nil {
		return m.MaxBalance
	}
	return 0
}

// Mapping of service name to throttling configuration.
type ServiceThrottlingConfig struct {
	ServiceName string            `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Config      *ThrottlingConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *ServiceThrottlingConfig) Reset()         { *m = ServiceThrottlingConfig{} }
func (m *ServiceThrottlingConfig) String() string { return proto.CompactTextString(m) }
func (*ServiceThrottlingConfig) ProtoMessage()    {}
func (*ServiceThrottlingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorThrottling, []int{1}
}

func (m *ServiceThrottlingConfig) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServiceThrottlingConfig) GetConfig() *ThrottlingConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// Response mapping service names to specific throttling configs. Any other
// service not contained in the map should follow the default configuration
// provided in the response.
type ThrottlingResponse struct {
	DefaultConfig  *ThrottlingConfig          `protobuf:"bytes,1,opt,name=defaultConfig" json:"defaultConfig,omitempty"`
	ServiceConfigs []*ServiceThrottlingConfig `protobuf:"bytes,2,rep,name=serviceConfigs" json:"serviceConfigs,omitempty"`
}

func (m *ThrottlingResponse) Reset()                    { *m = ThrottlingResponse{} }
func (m *ThrottlingResponse) String() string            { return proto.CompactTextString(m) }
func (*ThrottlingResponse) ProtoMessage()               {}
func (*ThrottlingResponse) Descriptor() ([]byte, []int) { return fileDescriptorThrottling, []int{2} }

func (m *ThrottlingResponse) GetDefaultConfig() *ThrottlingConfig {
	if m != nil {
		return m.DefaultConfig
	}
	return nil
}

func (m *ThrottlingResponse) GetServiceConfigs() []*ServiceThrottlingConfig {
	if m != nil {
		return m.ServiceConfigs
	}
	return nil
}

type ThrottlingConfigParameters struct {
	ServiceNames []string `protobuf:"bytes,1,rep,name=serviceNames" json:"serviceNames,omitempty"`
}

func (m *ThrottlingConfigParameters) Reset()         { *m = ThrottlingConfigParameters{} }
func (m *ThrottlingConfigParameters) String() string { return proto.CompactTextString(m) }
func (*ThrottlingConfigParameters) ProtoMessage()    {}
func (*ThrottlingConfigParameters) Descriptor() ([]byte, []int) {
	return fileDescriptorThrottling, []int{3}
}

func (m *ThrottlingConfigParameters) GetServiceNames() []string {
	if m != nil {
		return m.ServiceNames
	}
	return nil
}

func init() {
	proto.RegisterType((*ThrottlingConfig)(nil), "jaeger.api_v2.ThrottlingConfig")
	golang_proto.RegisterType((*ThrottlingConfig)(nil), "jaeger.api_v2.ThrottlingConfig")
	proto.RegisterType((*ServiceThrottlingConfig)(nil), "jaeger.api_v2.ServiceThrottlingConfig")
	golang_proto.RegisterType((*ServiceThrottlingConfig)(nil), "jaeger.api_v2.ServiceThrottlingConfig")
	proto.RegisterType((*ThrottlingResponse)(nil), "jaeger.api_v2.ThrottlingResponse")
	golang_proto.RegisterType((*ThrottlingResponse)(nil), "jaeger.api_v2.ThrottlingResponse")
	proto.RegisterType((*ThrottlingConfigParameters)(nil), "jaeger.api_v2.ThrottlingConfigParameters")
	golang_proto.RegisterType((*ThrottlingConfigParameters)(nil), "jaeger.api_v2.ThrottlingConfigParameters")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ThrottlingService service

type ThrottlingServiceClient interface {
	GetThrottlingConfigs(ctx context.Context, in *ThrottlingConfigParameters, opts ...grpc.CallOption) (*ThrottlingResponse, error)
}

type throttlingServiceClient struct {
	cc *grpc.ClientConn
}

func NewThrottlingServiceClient(cc *grpc.ClientConn) ThrottlingServiceClient {
	return &throttlingServiceClient{cc}
}

func (c *throttlingServiceClient) GetThrottlingConfigs(ctx context.Context, in *ThrottlingConfigParameters, opts ...grpc.CallOption) (*ThrottlingResponse, error) {
	out := new(ThrottlingResponse)
	err := grpc.Invoke(ctx, "/jaeger.api_v2.ThrottlingService/getThrottlingConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ThrottlingService service

type ThrottlingServiceServer interface {
	GetThrottlingConfigs(context.Context, *ThrottlingConfigParameters) (*ThrottlingResponse, error)
}

func RegisterThrottlingServiceServer(s *grpc.Server, srv ThrottlingServiceServer) {
	s.RegisterService(&_ThrottlingService_serviceDesc, srv)
}

func _ThrottlingService_GetThrottlingConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThrottlingConfigParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrottlingServiceServer).GetThrottlingConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.ThrottlingService/GetThrottlingConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrottlingServiceServer).GetThrottlingConfigs(ctx, req.(*ThrottlingConfigParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _ThrottlingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.api_v2.ThrottlingService",
	HandlerType: (*ThrottlingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getThrottlingConfigs",
			Handler:    _ThrottlingService_GetThrottlingConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/proto/api_v2/throttling.proto",
}

func (m *ThrottlingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThrottlingConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxOperations != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintThrottling(dAtA, i, uint64(m.MaxOperations))
	}
	if m.CreditsPerSecond != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Throttling(dAtA, i, uint64(math.Float64bits(float64(m.CreditsPerSecond))))
	}
	if m.MaxBalance != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Throttling(dAtA, i, uint64(math.Float64bits(float64(m.MaxBalance))))
	}
	return i, nil
}

func (m *ServiceThrottlingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceThrottlingConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrottling(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if m.Config != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintThrottling(dAtA, i, uint64(m.Config.Size()))
		n1, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ThrottlingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThrottlingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DefaultConfig != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThrottling(dAtA, i, uint64(m.DefaultConfig.Size()))
		n2, err := m.DefaultConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.ServiceConfigs) > 0 {
		for _, msg := range m.ServiceConfigs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintThrottling(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ThrottlingConfigParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThrottlingConfigParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceNames) > 0 {
		for _, s := range m.ServiceNames {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Throttling(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Throttling(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintThrottling(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ThrottlingConfig) Size() (n int) {
	var l int
	_ = l
	if m.MaxOperations != 0 {
		n += 1 + sovThrottling(uint64(m.MaxOperations))
	}
	if m.CreditsPerSecond != 0 {
		n += 9
	}
	if m.MaxBalance != 0 {
		n += 9
	}
	return n
}

func (m *ServiceThrottlingConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovThrottling(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovThrottling(uint64(l))
	}
	return n
}

func (m *ThrottlingResponse) Size() (n int) {
	var l int
	_ = l
	if m.DefaultConfig != nil {
		l = m.DefaultConfig.Size()
		n += 1 + l + sovThrottling(uint64(l))
	}
	if len(m.ServiceConfigs) > 0 {
		for _, e := range m.ServiceConfigs {
			l = e.Size()
			n += 1 + l + sovThrottling(uint64(l))
		}
	}
	return n
}

func (m *ThrottlingConfigParameters) Size() (n int) {
	var l int
	_ = l
	if len(m.ServiceNames) > 0 {
		for _, s := range m.ServiceNames {
			l = len(s)
			n += 1 + l + sovThrottling(uint64(l))
		}
	}
	return n
}

func sovThrottling(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozThrottling(x uint64) (n int) {
	return sovThrottling(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ThrottlingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrottling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThrottlingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThrottlingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOperations", wireType)
			}
			m.MaxOperations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrottling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOperations |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditsPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.CreditsPerSecond = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBalance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.MaxBalance = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipThrottling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrottling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceThrottlingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrottling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceThrottlingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceThrottlingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrottling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrottling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrottling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrottling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &ThrottlingConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrottling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrottling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThrottlingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrottling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThrottlingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThrottlingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrottling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrottling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultConfig == nil {
				m.DefaultConfig = &ThrottlingConfig{}
			}
			if err := m.DefaultConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrottling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThrottling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceConfigs = append(m.ServiceConfigs, &ServiceThrottlingConfig{})
			if err := m.ServiceConfigs[len(m.ServiceConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrottling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrottling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThrottlingConfigParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThrottling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThrottlingConfigParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThrottlingConfigParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThrottling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThrottling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceNames = append(m.ServiceNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThrottling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThrottling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThrottling(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThrottling
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThrottling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThrottling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthThrottling
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowThrottling
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipThrottling(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthThrottling = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThrottling   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("model/proto/api_v2/throttling.proto", fileDescriptorThrottling) }
func init() {
	golang_proto.RegisterFile("model/proto/api_v2/throttling.proto", fileDescriptorThrottling)
}

var fileDescriptorThrottling = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0xe5, 0x54, 0xab, 0xb4, 0xaf, 0x14, 0x0d, 0x6b, 0x52, 0xab, 0x0a, 0x42, 0x08, 0x08,
	0x4a, 0xc5, 0x12, 0x08, 0x42, 0x48, 0x3b, 0xb1, 0x22, 0x0e, 0x70, 0x18, 0x55, 0xc6, 0x89, 0x0b,
	0xf2, 0xd2, 0x6f, 0x6e, 0x50, 0x62, 0x47, 0xb6, 0x57, 0x76, 0x06, 0x9e, 0x00, 0x4e, 0x3c, 0x03,
	0x2f, 0xc1, 0x91, 0x23, 0x12, 0x2f, 0x80, 0x0a, 0x0f, 0x82, 0xea, 0x04, 0xda, 0xa4, 0x9a, 0xe0,
	0xe4, 0xe4, 0xff, 0xfd, 0xfc, 0xff, 0xfe, 0xfe, 0xe2, 0xc0, 0xf5, 0x5c, 0x4e, 0x31, 0x0b, 0x0b,
	0x25, 0x8d, 0x0c, 0x59, 0x91, 0xbe, 0x9a, 0x47, 0xa1, 0x99, 0x29, 0x69, 0x4c, 0x96, 0x0a, 0x1e,
	0x58, 0x9d, 0x76, 0x5f, 0x33, 0xe4, 0xa8, 0x82, 0xb2, 0x3e, 0xd8, 0xe5, 0x92, 0xcb, 0x72, 0xc7,
	0xf2, 0xa9, 0x84, 0x06, 0x97, 0xb9, 0x94, 0x3c, 0xc3, 0xa5, 0x49, 0xc8, 0x84, 0x90, 0x86, 0x99,
	0x54, 0x0a, 0x5d, 0x55, 0xef, 0xd8, 0x25, 0xd9, 0xe3, 0x28, 0xf6, 0xf4, 0x1b, 0xc6, 0x39, 0xaa,
	0x50, 0x16, 0x96, 0xd8, 0xa4, 0xfd, 0xf7, 0x04, 0x76, 0x5e, 0xfc, 0x4d, 0xf1, 0x58, 0x8a, 0x93,
	0x94, 0xd3, 0x1b, 0xd0, 0xcd, 0xd9, 0xd9, 0xf3, 0x02, 0x55, 0xc9, 0xf6, 0x89, 0x47, 0x86, 0x5b,
	0x71, 0x5d, 0xa4, 0x23, 0xd8, 0x49, 0x14, 0x4e, 0x53, 0xa3, 0x27, 0xa8, 0x8e, 0x30, 0x91, 0x62,
	0xda, 0x77, 0x3c, 0x32, 0x24, 0xf1, 0x86, 0x4e, 0x5d, 0x80, 0x9c, 0x9d, 0x8d, 0x59, 0xc6, 0x44,
	0x82, 0xfd, 0x96, 0xa5, 0xd6, 0x14, 0xdf, 0x40, 0xef, 0x08, 0xd5, 0x3c, 0x4d, 0x70, 0x23, 0x8c,
	0x07, 0x1d, 0x5d, 0x96, 0x0e, 0x59, 0x8e, 0x36, 0xca, 0x76, 0xbc, 0x2e, 0xd1, 0x87, 0xd0, 0x4e,
	0x2c, 0x6b, 0xdb, 0x77, 0xa2, 0xab, 0x41, 0x6d, 0x8a, 0x41, 0xd3, 0x32, 0xae, 0x70, 0xff, 0x33,
	0x01, 0xba, 0x2a, 0xc6, 0xa8, 0x0b, 0x29, 0x34, 0xd2, 0x27, 0xd0, 0x9d, 0xe2, 0x09, 0x3b, 0xcd,
	0x4c, 0xc9, 0xdb, 0x9e, 0xff, 0x61, 0x5b, 0xdf, 0x45, 0x0f, 0xe1, 0x62, 0x95, 0xb2, 0x14, 0x74,
	0xdf, 0xf1, 0x5a, 0xc3, 0x4e, 0x74, 0xb3, 0xe1, 0x73, 0xce, 0xc1, 0xe3, 0xc6, 0x6e, 0xff, 0x11,
	0x0c, 0x9a, 0xcc, 0x84, 0x29, 0x96, 0xa3, 0x41, 0xa5, 0xa9, 0x0f, 0x17, 0xd6, 0x66, 0xb2, 0xfc,
	0x64, 0xad, 0xe1, 0x76, 0x5c, 0xd3, 0xa2, 0x4f, 0x04, 0x2e, 0xad, 0x2c, 0xaa, 0xbe, 0xf4, 0x1d,
	0x81, 0x5d, 0x8e, 0xa6, 0xe9, 0xad, 0xe9, 0xed, 0x7f, 0x1c, 0x78, 0xd5, 0x7d, 0x70, 0xed, 0x5c,
	0xf4, 0xcf, 0x54, 0xfd, 0x2b, 0x6f, 0xbf, 0xff, 0xfa, 0xe8, 0xf4, 0x7c, 0x6a, 0xef, 0x6d, 0xed,
	0xf2, 0xef, 0x93, 0xd1, 0x78, 0xfe, 0xe1, 0x60, 0x4c, 0xb7, 0xa2, 0xd6, 0xbd, 0xe0, 0xee, 0xc8,
	0x21, 0x8e, 0x7a, 0x00, 0xf0, 0xcc, 0x5a, 0x7a, 0x07, 0x93, 0xa7, 0xf4, 0xd6, 0xcc, 0x98, 0x42,
	0xef, 0x87, 0x21, 0x4f, 0xcd, 0xec, 0xf4, 0x38, 0x48, 0x64, 0x1e, 0x96, 0x1d, 0x8d, 0x62, 0x49,
	0x2a, 0x78, 0xf5, 0xf6, 0x75, 0xe1, 0x92, 0x6f, 0x0b, 0x97, 0xfc, 0x58, 0xb8, 0xe4, 0xcb, 0x4f,
	0x97, 0x40, 0x2f, 0x95, 0x41, 0x0d, 0xac, 0x12, 0xbe, 0x6c, 0x97, 0xeb, 0x71, 0xdb, 0xfe, 0x07,
	0xf7, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xd2, 0xa4, 0x64, 0x9f, 0x03, 0x00, 0x00,
}
