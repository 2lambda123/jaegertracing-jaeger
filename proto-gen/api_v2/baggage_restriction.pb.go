// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api_v2/baggage_restriction.proto

package api_v2

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BaggageRestrictionParameters struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaggageRestrictionParameters) Reset()         { *m = BaggageRestrictionParameters{} }
func (m *BaggageRestrictionParameters) String() string { return proto.CompactTextString(m) }
func (*BaggageRestrictionParameters) ProtoMessage()    {}
func (*BaggageRestrictionParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3b7960bd9943202, []int{0}
}
func (m *BaggageRestrictionParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaggageRestrictionParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaggageRestrictionParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaggageRestrictionParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaggageRestrictionParameters.Merge(m, src)
}
func (m *BaggageRestrictionParameters) XXX_Size() int {
	return m.Size()
}
func (m *BaggageRestrictionParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_BaggageRestrictionParameters.DiscardUnknown(m)
}

var xxx_messageInfo_BaggageRestrictionParameters proto.InternalMessageInfo

func (m *BaggageRestrictionParameters) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

// BaggageRestriction contains the baggage key and the maximum length of the baggage value.
type BaggageRestriction struct {
	BaggageKey           string   `protobuf:"bytes,1,opt,name=baggageKey,proto3" json:"baggageKey,omitempty"`
	MaxValueLength       int32    `protobuf:"varint,2,opt,name=maxValueLength,proto3" json:"maxValueLength,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaggageRestriction) Reset()         { *m = BaggageRestriction{} }
func (m *BaggageRestriction) String() string { return proto.CompactTextString(m) }
func (*BaggageRestriction) ProtoMessage()    {}
func (*BaggageRestriction) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3b7960bd9943202, []int{1}
}
func (m *BaggageRestriction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaggageRestriction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaggageRestriction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaggageRestriction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaggageRestriction.Merge(m, src)
}
func (m *BaggageRestriction) XXX_Size() int {
	return m.Size()
}
func (m *BaggageRestriction) XXX_DiscardUnknown() {
	xxx_messageInfo_BaggageRestriction.DiscardUnknown(m)
}

var xxx_messageInfo_BaggageRestriction proto.InternalMessageInfo

func (m *BaggageRestriction) GetBaggageKey() string {
	if m != nil {
		return m.BaggageKey
	}
	return ""
}

func (m *BaggageRestriction) GetMaxValueLength() int32 {
	if m != nil {
		return m.MaxValueLength
	}
	return 0
}

type BaggageRestrictionResponse struct {
	BaggageRestrictions  []*BaggageRestriction `protobuf:"bytes,1,rep,name=baggageRestrictions,proto3" json:"baggageRestrictions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BaggageRestrictionResponse) Reset()         { *m = BaggageRestrictionResponse{} }
func (m *BaggageRestrictionResponse) String() string { return proto.CompactTextString(m) }
func (*BaggageRestrictionResponse) ProtoMessage()    {}
func (*BaggageRestrictionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3b7960bd9943202, []int{2}
}
func (m *BaggageRestrictionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaggageRestrictionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaggageRestrictionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaggageRestrictionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaggageRestrictionResponse.Merge(m, src)
}
func (m *BaggageRestrictionResponse) XXX_Size() int {
	return m.Size()
}
func (m *BaggageRestrictionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BaggageRestrictionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BaggageRestrictionResponse proto.InternalMessageInfo

func (m *BaggageRestrictionResponse) GetBaggageRestrictions() []*BaggageRestriction {
	if m != nil {
		return m.BaggageRestrictions
	}
	return nil
}

func init() {
	proto.RegisterType((*BaggageRestrictionParameters)(nil), "jaeger.api_v2.BaggageRestrictionParameters")
	golang_proto.RegisterType((*BaggageRestrictionParameters)(nil), "jaeger.api_v2.BaggageRestrictionParameters")
	proto.RegisterType((*BaggageRestriction)(nil), "jaeger.api_v2.BaggageRestriction")
	golang_proto.RegisterType((*BaggageRestriction)(nil), "jaeger.api_v2.BaggageRestriction")
	proto.RegisterType((*BaggageRestrictionResponse)(nil), "jaeger.api_v2.BaggageRestrictionResponse")
	golang_proto.RegisterType((*BaggageRestrictionResponse)(nil), "jaeger.api_v2.BaggageRestrictionResponse")
}

func init() { proto.RegisterFile("api_v2/baggage_restriction.proto", fileDescriptor_c3b7960bd9943202) }
func init() {
	golang_proto.RegisterFile("api_v2/baggage_restriction.proto", fileDescriptor_c3b7960bd9943202)
}

var fileDescriptor_c3b7960bd9943202 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0x67, 0x52, 0x5a, 0x70, 0x8a, 0x15, 0xc6, 0xa2, 0x25, 0x94, 0x10, 0x73, 0xd0, 0x5a, 0x6d,
	0x46, 0x23, 0x5e, 0x7a, 0xb2, 0xbd, 0xf9, 0x07, 0x29, 0x29, 0x78, 0x10, 0xa1, 0x4c, 0xc2, 0x63,
	0x3a, 0xd2, 0x64, 0xe2, 0xcc, 0xb4, 0xea, 0xd5, 0xb3, 0xa7, 0xdd, 0x0f, 0xb0, 0x5f, 0x65, 0x8f,
	0x7b, 0x5c, 0xd8, 0x2f, 0xb0, 0x74, 0xf7, 0x83, 0x2c, 0x4d, 0x02, 0x6d, 0x37, 0x85, 0x9e, 0x5e,
	0xf2, 0xde, 0xef, 0xfd, 0xde, 0xef, 0xf7, 0xe6, 0x61, 0x97, 0x65, 0x62, 0xb6, 0x0a, 0x68, 0xc4,
	0x38, 0x67, 0x1c, 0x66, 0x0a, 0xb4, 0x51, 0x22, 0x36, 0x42, 0xa6, 0x7e, 0xa6, 0xa4, 0x91, 0xe4,
	0xe1, 0x4f, 0x06, 0x1c, 0x94, 0x5f, 0x00, 0xed, 0x36, 0x97, 0x5c, 0xe6, 0x15, 0xba, 0xf9, 0x2a,
	0x40, 0x76, 0x97, 0x4b, 0xc9, 0x17, 0x40, 0x59, 0x26, 0x28, 0x4b, 0x53, 0x69, 0xd8, 0x86, 0x41,
	0x97, 0xd5, 0xd7, 0x79, 0x88, 0x07, 0x1c, 0xd2, 0x81, 0xfe, 0xcd, 0x38, 0x07, 0x45, 0x65, 0x96,
	0x23, 0xaa, 0x68, 0xef, 0x03, 0xee, 0x8e, 0x0b, 0x35, 0xe1, 0x56, 0xcc, 0x84, 0x29, 0x96, 0x80,
	0x01, 0xa5, 0x89, 0x8b, 0x9b, 0x1a, 0xd4, 0x4a, 0xc4, 0xf0, 0x95, 0x25, 0xd0, 0x41, 0x2e, 0xea,
	0x3d, 0x08, 0x77, 0x53, 0xde, 0x0f, 0x4c, 0xaa, 0x0c, 0xc4, 0xc1, 0xb8, 0x74, 0xf9, 0x19, 0xfe,
	0x96, 0x6d, 0x3b, 0x19, 0xf2, 0x1c, 0xb7, 0x12, 0xf6, 0xe7, 0x1b, 0x5b, 0x2c, 0xe1, 0x0b, 0xa4,
	0xdc, 0xcc, 0x3b, 0x96, 0x8b, 0x7a, 0xf5, 0xf0, 0x5e, 0xd6, 0xfb, 0x85, 0xed, 0x2a, 0x7b, 0x08,
	0x3a, 0x93, 0xa9, 0x06, 0x32, 0xc5, 0x8f, 0xa3, 0x4a, 0x55, 0x77, 0x90, 0x5b, 0xeb, 0x35, 0x83,
	0x67, 0xfe, 0xde, 0x32, 0xfd, 0x03, 0x3c, 0x87, 0xba, 0x83, 0x33, 0x84, 0x5b, 0x25, 0x76, 0x5a,
	0xf8, 0x24, 0xff, 0x11, 0x7e, 0xc2, 0xc1, 0x54, 0x19, 0x34, 0x79, 0x75, 0x74, 0xca, 0x76, 0x9b,
	0xf6, 0xcb, 0xe3, 0x92, 0x4a, 0x6b, 0x9e, 0xfd, 0xef, 0xea, 0xf6, 0xd4, 0x6a, 0x7b, 0x8f, 0xf2,
	0x67, 0xde, 0x1e, 0xcd, 0x10, 0xf5, 0xc7, 0xab, 0x93, 0xd1, 0x98, 0xd4, 0x83, 0xda, 0x5b, 0xff,
	0x4d, 0xdf, 0x42, 0x96, 0x7a, 0x8f, 0xf1, 0xa7, 0x9c, 0xd7, 0x1d, 0x4d, 0x3e, 0x92, 0x17, 0x73,
	0x63, 0x32, 0x3d, 0xa4, 0x94, 0x0b, 0x33, 0x5f, 0x46, 0x7e, 0x2c, 0x13, 0x5a, 0x8c, 0x35, 0x8a,
	0xc5, 0x22, 0xe5, 0xe5, 0xdf, 0xc5, 0xda, 0x41, 0x97, 0x6b, 0x07, 0x5d, 0xaf, 0x1d, 0x74, 0x7e,
	0xe3, 0x20, 0xfc, 0x54, 0x48, 0x7f, 0x0f, 0x58, 0xca, 0xfc, 0xde, 0x28, 0x62, 0xd4, 0xc8, 0x6f,
	0xe6, 0xdd, 0x5d, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x34, 0xcd, 0xdd, 0xc8, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BaggageServiceClient is the client API for BaggageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BaggageServiceClient interface {
	//*
	// getBaggageRestrictions retrieves the baggage restrictions for a specific service.
	// Usually, baggageRestrictions apply to all services however there may be situations
	// where a baggageKey might only be allowed to be set by a specific service.
	GetBaggageRestrictions(ctx context.Context, in *BaggageRestrictionParameters, opts ...grpc.CallOption) (*BaggageRestrictionResponse, error)
}

type baggageServiceClient struct {
	cc *grpc.ClientConn
}

func NewBaggageServiceClient(cc *grpc.ClientConn) BaggageServiceClient {
	return &baggageServiceClient{cc}
}

func (c *baggageServiceClient) GetBaggageRestrictions(ctx context.Context, in *BaggageRestrictionParameters, opts ...grpc.CallOption) (*BaggageRestrictionResponse, error) {
	out := new(BaggageRestrictionResponse)
	err := c.cc.Invoke(ctx, "/jaeger.api_v2.BaggageService/getBaggageRestrictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaggageServiceServer is the server API for BaggageService service.
type BaggageServiceServer interface {
	//*
	// getBaggageRestrictions retrieves the baggage restrictions for a specific service.
	// Usually, baggageRestrictions apply to all services however there may be situations
	// where a baggageKey might only be allowed to be set by a specific service.
	GetBaggageRestrictions(context.Context, *BaggageRestrictionParameters) (*BaggageRestrictionResponse, error)
}

func RegisterBaggageServiceServer(s *grpc.Server, srv BaggageServiceServer) {
	s.RegisterService(&_BaggageService_serviceDesc, srv)
}

func _BaggageService_GetBaggageRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaggageRestrictionParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaggageServiceServer).GetBaggageRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.BaggageService/GetBaggageRestrictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaggageServiceServer).GetBaggageRestrictions(ctx, req.(*BaggageRestrictionParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _BaggageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.api_v2.BaggageService",
	HandlerType: (*BaggageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBaggageRestrictions",
			Handler:    _BaggageService_GetBaggageRestrictions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_v2/baggage_restriction.proto",
}

func (m *BaggageRestrictionParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaggageRestrictionParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBaggageRestriction(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BaggageRestriction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaggageRestriction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaggageKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBaggageRestriction(dAtA, i, uint64(len(m.BaggageKey)))
		i += copy(dAtA[i:], m.BaggageKey)
	}
	if m.MaxValueLength != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBaggageRestriction(dAtA, i, uint64(m.MaxValueLength))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BaggageRestrictionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaggageRestrictionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaggageRestrictions) > 0 {
		for _, msg := range m.BaggageRestrictions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBaggageRestriction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBaggageRestriction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BaggageRestrictionParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovBaggageRestriction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaggageRestriction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaggageKey)
	if l > 0 {
		n += 1 + l + sovBaggageRestriction(uint64(l))
	}
	if m.MaxValueLength != 0 {
		n += 1 + sovBaggageRestriction(uint64(m.MaxValueLength))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaggageRestrictionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BaggageRestrictions) > 0 {
		for _, e := range m.BaggageRestrictions {
			l = e.Size()
			n += 1 + l + sovBaggageRestriction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBaggageRestriction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBaggageRestriction(x uint64) (n int) {
	return sovBaggageRestriction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaggageRestrictionParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaggageRestriction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaggageRestrictionParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaggageRestrictionParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaggageRestriction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaggageRestriction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaggageRestriction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaggageRestriction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaggageRestriction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaggageRestriction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaggageKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaggageRestriction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaggageKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValueLength", wireType)
			}
			m.MaxValueLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaggageRestriction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValueLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaggageRestriction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaggageRestrictionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaggageRestriction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaggageRestrictionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaggageRestrictionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaggageRestrictions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaggageRestriction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaggageRestrictions = append(m.BaggageRestrictions, &BaggageRestriction{})
			if err := m.BaggageRestrictions[len(m.BaggageRestrictions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaggageRestriction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBaggageRestriction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBaggageRestriction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBaggageRestriction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBaggageRestriction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBaggageRestriction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBaggageRestriction
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBaggageRestriction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBaggageRestriction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBaggageRestriction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBaggageRestriction
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBaggageRestriction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBaggageRestriction   = fmt.Errorf("proto: integer overflow")
)
