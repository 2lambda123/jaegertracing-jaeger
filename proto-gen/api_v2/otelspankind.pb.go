// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: otelspankind.proto

package api_v2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// SpanKind is the type of span. Can be used to specify additional relationships between spans
// in addition to a parent/child relationship.
type SpanKind int32

const (
	// Unspecified. Do NOT use as default.
	// Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
	SpanKind_SPAN_KIND_UNSPECIFIED SpanKind = 0
	// Indicates that the span represents an internal operation within an application,
	// as opposed to an operation happening at the boundaries. Default value.
	SpanKind_SPAN_KIND_INTERNAL SpanKind = 1
	// Indicates that the span covers server-side handling of an RPC or other
	// remote network request.
	SpanKind_SPAN_KIND_SERVER SpanKind = 2
	// Indicates that the span describes a request to some remote service.
	SpanKind_SPAN_KIND_CLIENT SpanKind = 3
	// Indicates that the span describes a producer sending a message to a broker.
	// Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
	// between producer and consumer spans. A PRODUCER span ends when the message was accepted
	// by the broker while the logical processing of the message might span a much longer time.
	SpanKind_SPAN_KIND_PRODUCER SpanKind = 4
	// Indicates that the span describes consumer receiving a message from a broker.
	// Like the PRODUCER kind, there is often no direct critical path latency relationship
	// between producer and consumer spans.
	SpanKind_SPAN_KIND_CONSUMER SpanKind = 5
)

var SpanKind_name = map[int32]string{
	0: "SPAN_KIND_UNSPECIFIED",
	1: "SPAN_KIND_INTERNAL",
	2: "SPAN_KIND_SERVER",
	3: "SPAN_KIND_CLIENT",
	4: "SPAN_KIND_PRODUCER",
	5: "SPAN_KIND_CONSUMER",
}

var SpanKind_value = map[string]int32{
	"SPAN_KIND_UNSPECIFIED": 0,
	"SPAN_KIND_INTERNAL":    1,
	"SPAN_KIND_SERVER":      2,
	"SPAN_KIND_CLIENT":      3,
	"SPAN_KIND_PRODUCER":    4,
	"SPAN_KIND_CONSUMER":    5,
}

func (x SpanKind) String() string {
	return proto.EnumName(SpanKind_name, int32(x))
}

func (SpanKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77f837d0289d1179, []int{0}
}

func init() {
	proto.RegisterEnum("jaeger.api_v2.SpanKind", SpanKind_name, SpanKind_value)
}

func init() { proto.RegisterFile("otelspankind.proto", fileDescriptor_77f837d0289d1179) }

var fileDescriptor_77f837d0289d1179 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0x2f, 0x49, 0xcd,
	0x29, 0x2e, 0x48, 0xcc, 0xcb, 0xce, 0xcc, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0xcd, 0x4a, 0x4c, 0x4d, 0x4f, 0x2d, 0xd2, 0x4b, 0x2c, 0xc8, 0x8c, 0x2f, 0x33, 0x92, 0x12, 0x49,
	0xcf, 0x4f, 0xcf, 0x07, 0xcb, 0xe8, 0x83, 0x58, 0x10, 0x45, 0x5a, 0x33, 0x19, 0xb9, 0x38, 0x82,
	0x0b, 0x12, 0xf3, 0xbc, 0x33, 0xf3, 0x52, 0x84, 0x24, 0xb9, 0x44, 0x83, 0x03, 0x1c, 0xfd, 0xe2,
	0xbd, 0x3d, 0xfd, 0x5c, 0xe2, 0x43, 0xfd, 0x82, 0x03, 0x5c, 0x9d, 0x3d, 0xdd, 0x3c, 0x5d, 0x5d,
	0x04, 0x18, 0x84, 0xc4, 0xb8, 0x84, 0x10, 0x52, 0x9e, 0x7e, 0x21, 0xae, 0x41, 0x7e, 0x8e, 0x3e,
	0x02, 0x8c, 0x42, 0x22, 0x5c, 0x02, 0x08, 0xf1, 0x60, 0xd7, 0xa0, 0x30, 0xd7, 0x20, 0x01, 0x26,
	0x54, 0x51, 0x67, 0x1f, 0x4f, 0x57, 0xbf, 0x10, 0x01, 0x66, 0x54, 0x33, 0x02, 0x82, 0xfc, 0x5d,
	0x42, 0x9d, 0x5d, 0x83, 0x04, 0x58, 0x50, 0xc5, 0x9d, 0xfd, 0xfd, 0x82, 0x43, 0x7d, 0x5d, 0x83,
	0x04, 0x58, 0x9d, 0x74, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0x46, 0x2e, 0xf1, 0xcc, 0x7c, 0x3d, 0x88, 0x8f, 0x4a, 0x8a, 0x12, 0x93, 0x33, 0xf3, 0xd2, 0xa1,
	0x1e, 0x8b, 0x62, 0x83, 0xd0, 0x49, 0x6c, 0x60, 0x1f, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xd0, 0x03, 0xa9, 0x42, 0x0c, 0x01, 0x00, 0x00,
}
