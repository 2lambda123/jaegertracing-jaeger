// Code generated by "esc -pkg frontend -o examples/hotrod/services/frontend/gen_assets.go -prefix examples/hotrod/services/frontend/web_assets examples/hotrod/services/frontend/web_assets"; DO NOT EDIT.

package frontend

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		name:    "index.html",
		local:   "examples/hotrod/services/frontend/web_assets/index.html",
		size:    3552,
		modtime: 1572778479,
		compressed: `
H4sIAAAAAAAC/9RXX1PbSBJ/96fo0uZO8hlJGEMgxtIWh7OE7GXJGchWbisPo5m2NEaaUWZGtlmK7341
kmxkSK728eIHmOnu6e5f/7UnmSnyuAcwKdAQoBlRGk3kXF5f+ScnR2/8ofPEFaTAyFlyXJVSGQeoFAaF
iZwVZyaLGC45Rb++7AEX3HCS+5qSHKNhsL8HBVnzoiq6pEqjqu8kyTHab4xlSJg9AEwMNznG76SZXU3B
hxlnqOFKwBQLItgkbPiNrKaKlwa0opGTGVPqcRhSyTBYfK1Q3QdUFmFz9EfBMBgGBRfBQjvxJGyetnpy
Lu5AYR452tznqDNE40CmcP6ktyBrykSQSGm0UaS0F6t/SwhHwSg4DqnWT7TaINXaAS4Mpoqb+8jRGRmd
HPr//PSZ8+vLX/DXIbso3s/O7u5p9e7s3SwdHVwVt3S1OpZiNPvM0sNPZPCxuL7Rf4a/vj5ZJuztIjus
HKBKai0VT7mIHCKkuC9kpZ3/EZy/CmLxHMPimxBu6NHlv3myf3D8dXm/uP4wf7e4+kD+dTevfv+0/s/6
9qM4f392nB8U57//dllevCkuzqcnq4vfLunH6fHNmnwfwlOCWjA2L3EvqCrO4AEKolIufCPLMQyPyvUp
PPaCTBolmZ9UxkgBD1ASxrhIx3CwbyVopbRUYyilBaJOd5Xsf0vJOJNLVPDw8u2c5wbVGBLF08wI1No7
Ofpb36r4qVWRy/Q7nv5kePkdVg02bNHazgg3rTFJJLtvU8v4EmhOtI4c25GEC1Rt2ne5dbhIjso0f30u
5tJGl/HlVp6ixbS52m4c2v6DWXAVTINJmA27vMN4gkX8oi2xiCdhdtiR7Lih5Mp54ryEkPsF80dgD7rw
Xz+TbQqgJOIF1X5aJYkRkBhRA6wPSS7pHeyk0/mmAkYM8WmljSxQRc7wYOTEM0IzzF0Nv+RSkRymqHkq
9CS0bjxD0o3l/zu40ZsDJ75RsoDzTFKZE8NR/fCojkdDJ35PSiJQo82VRmV+/GQdvT524rOC/MlFCudy
PkeEmSTaoPor4J5fLU7OIsfw0onPc07vQArYmKtXPZBELhGMBKkYKiBAiQq+p+hpzjkb7DkS9ny8hN35
smVNwmae9babKu715pWghksBc6kKYqaVIvbqsfbQh4cewJIoYBDBhgoheMP9+gP/gGHz7/V+/7SVrQQ3
GiJwCy5cS1RoKiXgAzFZoGQlmMf6MGjkTnuPvZ59RXOOwtzeXk4h6oo2RyKYLLx+a8/asm9yos0Mv1ao
Tf1s/7TXe+U59dZy+oH95uU5n2WlYIVJa8HVwNnYbjglRRo7MOiaHoBj10HD6rfqdkupH1CbTG8TPA+X
pgnUjjuDwSYequPhrinfWt95tXkzV6izc6IgglfeK8/pLDmnH5QKSxTMc7vNVD/xKVFOvTGmXJfE0MwW
c1NXQfCHwq9jcAdbjwbul3aV2DJx+wHNeM4UCq//x/6XbUa3RRsBLk1giErRBLZ9NJpgw7XSdnuistl/
aOvRXRBMUfkJSVOSojsGV6PWXIrIfR57d28TrJq3dbMH8Gi1Uym0zDHIZeq1lrY+JjiXCiGCKTEYCLny
bPoAwhBuNdpvFAqFgdvZJRANCdFYEpPZygeyIOuNMd2qs8yPCud8DRGsuGByFeSS1g0QWKbtX2t7R/Dp
EuQoUpNBDEP4uSs0BtetHXsVWLtehzUAN2Rt2n7ezqU6SpsEDMD9u5BCY03e6Y29NuRtYMabw15NLdBk
ko3BvXh74zYkXVGKWo9hW8k2o3tgcG2uDTGV7m+zaENC5qYugW6A20ncyYvVsWXUo2MzNqIXY4YYEry9
OduKb6q+6Vy3/VEySWILtpaeKr5swjAJkxiIUnxpK5wLqGU2tgbgQlvt3UJqaiwnBgW9b3heDctvyseO
JbfQX9zWpUcbqcf+ae+xKabO1+RJ2Pyw+28AAAD//2U/DQ7gDQAA
`,
	},

	"/": {
		name:  "/",
		local: `examples/hotrod/services/frontend/web_assets`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"examples/hotrod/services/frontend/web_assets": {
		_escData["/index.html"],
	},
}
