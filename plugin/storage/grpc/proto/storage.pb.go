// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		storage.proto

	It has these top-level messages:
		WriteSpanRequest
		WriteSpanResponse
		GetTraceRequest
		GetTraceSuccess
		GetTraceResponse
		GetServicesRequest
		GetServicesSuccess
		GetServicesResponse
		GetOperationsRequest
		GetOperationsSuccess
		GetOperationsResponse
		TraceQueryParameters
		FindTracesRequest
		FindTracesSuccess
		FindTracesResponse
		FindTraceIDsRequest
		FindTraceIDsSuccess
		FindTraceIDsResponse
		EmptyResponse
		StoragePluginError
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import jaeger_api_v2 "github.com/jaegertracing/jaeger/model"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"

import github_com_jaegertracing_jaeger_model "github.com/jaegertracing/jaeger/model"
import time "time"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type WriteSpanRequest struct {
	Span *jaeger_api_v2.Span `protobuf:"bytes,1,opt,name=span" json:"span,omitempty"`
}

func (m *WriteSpanRequest) Reset()                    { *m = WriteSpanRequest{} }
func (m *WriteSpanRequest) String() string            { return proto1.CompactTextString(m) }
func (*WriteSpanRequest) ProtoMessage()               {}
func (*WriteSpanRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{0} }

func (m *WriteSpanRequest) GetSpan() *jaeger_api_v2.Span {
	if m != nil {
		return m.Span
	}
	return nil
}

type WriteSpanResponse struct {
	// Types that are valid to be assigned to Response:
	//	*WriteSpanResponse_Success
	//	*WriteSpanResponse_Error
	Response isWriteSpanResponse_Response `protobuf_oneof:"response"`
}

func (m *WriteSpanResponse) Reset()                    { *m = WriteSpanResponse{} }
func (m *WriteSpanResponse) String() string            { return proto1.CompactTextString(m) }
func (*WriteSpanResponse) ProtoMessage()               {}
func (*WriteSpanResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{1} }

type isWriteSpanResponse_Response interface {
	isWriteSpanResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WriteSpanResponse_Success struct {
	Success *EmptyResponse `protobuf:"bytes,1,opt,name=success,oneof"`
}
type WriteSpanResponse_Error struct {
	Error *StoragePluginError `protobuf:"bytes,2,opt,name=error,oneof"`
}

func (*WriteSpanResponse_Success) isWriteSpanResponse_Response() {}
func (*WriteSpanResponse_Error) isWriteSpanResponse_Response()   {}

func (m *WriteSpanResponse) GetResponse() isWriteSpanResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *WriteSpanResponse) GetSuccess() *EmptyResponse {
	if x, ok := m.GetResponse().(*WriteSpanResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (m *WriteSpanResponse) GetError() *StoragePluginError {
	if x, ok := m.GetResponse().(*WriteSpanResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WriteSpanResponse) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _WriteSpanResponse_OneofMarshaler, _WriteSpanResponse_OneofUnmarshaler, _WriteSpanResponse_OneofSizer, []interface{}{
		(*WriteSpanResponse_Success)(nil),
		(*WriteSpanResponse_Error)(nil),
	}
}

func _WriteSpanResponse_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*WriteSpanResponse)
	// response
	switch x := m.Response.(type) {
	case *WriteSpanResponse_Success:
		_ = b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case *WriteSpanResponse_Error:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("WriteSpanResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _WriteSpanResponse_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*WriteSpanResponse)
	switch tag {
	case 1: // response.success
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(EmptyResponse)
		err := b.DecodeMessage(msg)
		m.Response = &WriteSpanResponse_Success{msg}
		return true, err
	case 2: // response.error
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StoragePluginError)
		err := b.DecodeMessage(msg)
		m.Response = &WriteSpanResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _WriteSpanResponse_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*WriteSpanResponse)
	// response
	switch x := m.Response.(type) {
	case *WriteSpanResponse_Success:
		s := proto1.Size(x.Success)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *WriteSpanResponse_Error:
		s := proto1.Size(x.Error)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetTraceRequest struct {
	TraceID github_com_jaegertracing_jaeger_model.TraceID `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3,customtype=github.com/jaegertracing/jaeger/model.TraceID" json:"trace_id"`
}

func (m *GetTraceRequest) Reset()                    { *m = GetTraceRequest{} }
func (m *GetTraceRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetTraceRequest) ProtoMessage()               {}
func (*GetTraceRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{2} }

type GetTraceSuccess struct {
	Trace *jaeger_api_v2.Trace `protobuf:"bytes,1,opt,name=trace" json:"trace,omitempty"`
}

func (m *GetTraceSuccess) Reset()                    { *m = GetTraceSuccess{} }
func (m *GetTraceSuccess) String() string            { return proto1.CompactTextString(m) }
func (*GetTraceSuccess) ProtoMessage()               {}
func (*GetTraceSuccess) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{3} }

func (m *GetTraceSuccess) GetTrace() *jaeger_api_v2.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type GetTraceResponse struct {
	// Types that are valid to be assigned to Response:
	//	*GetTraceResponse_Success
	//	*GetTraceResponse_Error
	Response isGetTraceResponse_Response `protobuf_oneof:"response"`
}

func (m *GetTraceResponse) Reset()                    { *m = GetTraceResponse{} }
func (m *GetTraceResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetTraceResponse) ProtoMessage()               {}
func (*GetTraceResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{4} }

type isGetTraceResponse_Response interface {
	isGetTraceResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetTraceResponse_Success struct {
	Success *GetTraceSuccess `protobuf:"bytes,1,opt,name=success,oneof"`
}
type GetTraceResponse_Error struct {
	Error *StoragePluginError `protobuf:"bytes,2,opt,name=error,oneof"`
}

func (*GetTraceResponse_Success) isGetTraceResponse_Response() {}
func (*GetTraceResponse_Error) isGetTraceResponse_Response()   {}

func (m *GetTraceResponse) GetResponse() isGetTraceResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GetTraceResponse) GetSuccess() *GetTraceSuccess {
	if x, ok := m.GetResponse().(*GetTraceResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (m *GetTraceResponse) GetError() *StoragePluginError {
	if x, ok := m.GetResponse().(*GetTraceResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetTraceResponse) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _GetTraceResponse_OneofMarshaler, _GetTraceResponse_OneofUnmarshaler, _GetTraceResponse_OneofSizer, []interface{}{
		(*GetTraceResponse_Success)(nil),
		(*GetTraceResponse_Error)(nil),
	}
}

func _GetTraceResponse_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*GetTraceResponse)
	// response
	switch x := m.Response.(type) {
	case *GetTraceResponse_Success:
		_ = b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case *GetTraceResponse_Error:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetTraceResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _GetTraceResponse_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*GetTraceResponse)
	switch tag {
	case 1: // response.success
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(GetTraceSuccess)
		err := b.DecodeMessage(msg)
		m.Response = &GetTraceResponse_Success{msg}
		return true, err
	case 2: // response.error
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StoragePluginError)
		err := b.DecodeMessage(msg)
		m.Response = &GetTraceResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetTraceResponse_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*GetTraceResponse)
	// response
	switch x := m.Response.(type) {
	case *GetTraceResponse_Success:
		s := proto1.Size(x.Success)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GetTraceResponse_Error:
		s := proto1.Size(x.Error)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetServicesRequest struct {
}

func (m *GetServicesRequest) Reset()                    { *m = GetServicesRequest{} }
func (m *GetServicesRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetServicesRequest) ProtoMessage()               {}
func (*GetServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{5} }

type GetServicesSuccess struct {
	Services []string `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *GetServicesSuccess) Reset()                    { *m = GetServicesSuccess{} }
func (m *GetServicesSuccess) String() string            { return proto1.CompactTextString(m) }
func (*GetServicesSuccess) ProtoMessage()               {}
func (*GetServicesSuccess) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{6} }

func (m *GetServicesSuccess) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

type GetServicesResponse struct {
	// Types that are valid to be assigned to Response:
	//	*GetServicesResponse_Success
	//	*GetServicesResponse_Error
	Response isGetServicesResponse_Response `protobuf_oneof:"response"`
}

func (m *GetServicesResponse) Reset()                    { *m = GetServicesResponse{} }
func (m *GetServicesResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetServicesResponse) ProtoMessage()               {}
func (*GetServicesResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{7} }

type isGetServicesResponse_Response interface {
	isGetServicesResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetServicesResponse_Success struct {
	Success *GetServicesSuccess `protobuf:"bytes,1,opt,name=success,oneof"`
}
type GetServicesResponse_Error struct {
	Error *StoragePluginError `protobuf:"bytes,2,opt,name=error,oneof"`
}

func (*GetServicesResponse_Success) isGetServicesResponse_Response() {}
func (*GetServicesResponse_Error) isGetServicesResponse_Response()   {}

func (m *GetServicesResponse) GetResponse() isGetServicesResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GetServicesResponse) GetSuccess() *GetServicesSuccess {
	if x, ok := m.GetResponse().(*GetServicesResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (m *GetServicesResponse) GetError() *StoragePluginError {
	if x, ok := m.GetResponse().(*GetServicesResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetServicesResponse) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _GetServicesResponse_OneofMarshaler, _GetServicesResponse_OneofUnmarshaler, _GetServicesResponse_OneofSizer, []interface{}{
		(*GetServicesResponse_Success)(nil),
		(*GetServicesResponse_Error)(nil),
	}
}

func _GetServicesResponse_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*GetServicesResponse)
	// response
	switch x := m.Response.(type) {
	case *GetServicesResponse_Success:
		_ = b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case *GetServicesResponse_Error:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetServicesResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _GetServicesResponse_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*GetServicesResponse)
	switch tag {
	case 1: // response.success
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(GetServicesSuccess)
		err := b.DecodeMessage(msg)
		m.Response = &GetServicesResponse_Success{msg}
		return true, err
	case 2: // response.error
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StoragePluginError)
		err := b.DecodeMessage(msg)
		m.Response = &GetServicesResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetServicesResponse_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*GetServicesResponse)
	// response
	switch x := m.Response.(type) {
	case *GetServicesResponse_Success:
		s := proto1.Size(x.Success)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GetServicesResponse_Error:
		s := proto1.Size(x.Error)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetOperationsRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *GetOperationsRequest) Reset()                    { *m = GetOperationsRequest{} }
func (m *GetOperationsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetOperationsRequest) ProtoMessage()               {}
func (*GetOperationsRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{8} }

func (m *GetOperationsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type GetOperationsSuccess struct {
	Operations []string `protobuf:"bytes,1,rep,name=operations" json:"operations,omitempty"`
}

func (m *GetOperationsSuccess) Reset()                    { *m = GetOperationsSuccess{} }
func (m *GetOperationsSuccess) String() string            { return proto1.CompactTextString(m) }
func (*GetOperationsSuccess) ProtoMessage()               {}
func (*GetOperationsSuccess) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{9} }

func (m *GetOperationsSuccess) GetOperations() []string {
	if m != nil {
		return m.Operations
	}
	return nil
}

type GetOperationsResponse struct {
	// Types that are valid to be assigned to Response:
	//	*GetOperationsResponse_Success
	//	*GetOperationsResponse_Error
	Response isGetOperationsResponse_Response `protobuf_oneof:"response"`
}

func (m *GetOperationsResponse) Reset()                    { *m = GetOperationsResponse{} }
func (m *GetOperationsResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetOperationsResponse) ProtoMessage()               {}
func (*GetOperationsResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{10} }

type isGetOperationsResponse_Response interface {
	isGetOperationsResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetOperationsResponse_Success struct {
	Success *GetOperationsSuccess `protobuf:"bytes,1,opt,name=success,oneof"`
}
type GetOperationsResponse_Error struct {
	Error *StoragePluginError `protobuf:"bytes,2,opt,name=error,oneof"`
}

func (*GetOperationsResponse_Success) isGetOperationsResponse_Response() {}
func (*GetOperationsResponse_Error) isGetOperationsResponse_Response()   {}

func (m *GetOperationsResponse) GetResponse() isGetOperationsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GetOperationsResponse) GetSuccess() *GetOperationsSuccess {
	if x, ok := m.GetResponse().(*GetOperationsResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (m *GetOperationsResponse) GetError() *StoragePluginError {
	if x, ok := m.GetResponse().(*GetOperationsResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetOperationsResponse) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _GetOperationsResponse_OneofMarshaler, _GetOperationsResponse_OneofUnmarshaler, _GetOperationsResponse_OneofSizer, []interface{}{
		(*GetOperationsResponse_Success)(nil),
		(*GetOperationsResponse_Error)(nil),
	}
}

func _GetOperationsResponse_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*GetOperationsResponse)
	// response
	switch x := m.Response.(type) {
	case *GetOperationsResponse_Success:
		_ = b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case *GetOperationsResponse_Error:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetOperationsResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _GetOperationsResponse_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*GetOperationsResponse)
	switch tag {
	case 1: // response.success
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(GetOperationsSuccess)
		err := b.DecodeMessage(msg)
		m.Response = &GetOperationsResponse_Success{msg}
		return true, err
	case 2: // response.error
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StoragePluginError)
		err := b.DecodeMessage(msg)
		m.Response = &GetOperationsResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetOperationsResponse_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*GetOperationsResponse)
	// response
	switch x := m.Response.(type) {
	case *GetOperationsResponse_Success:
		s := proto1.Size(x.Success)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *GetOperationsResponse_Error:
		s := proto1.Size(x.Error)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TraceQueryParameters struct {
	ServiceName   string            `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	OperationName string            `protobuf:"bytes,2,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	Tags          map[string]string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StartTimeMin  time.Time         `protobuf:"bytes,4,opt,name=start_time_min,json=startTimeMin,stdtime" json:"start_time_min"`
	StartTimeMax  time.Time         `protobuf:"bytes,5,opt,name=start_time_max,json=startTimeMax,stdtime" json:"start_time_max"`
	DurationMin   time.Duration     `protobuf:"bytes,6,opt,name=duration_min,json=durationMin,stdduration" json:"duration_min"`
	DurationMax   time.Duration     `protobuf:"bytes,7,opt,name=duration_max,json=durationMax,stdduration" json:"duration_max"`
	NumTraces     int32             `protobuf:"varint,8,opt,name=num_traces,json=numTraces,proto3" json:"num_traces,omitempty"`
}

func (m *TraceQueryParameters) Reset()                    { *m = TraceQueryParameters{} }
func (m *TraceQueryParameters) String() string            { return proto1.CompactTextString(m) }
func (*TraceQueryParameters) ProtoMessage()               {}
func (*TraceQueryParameters) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{11} }

func (m *TraceQueryParameters) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *TraceQueryParameters) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

func (m *TraceQueryParameters) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TraceQueryParameters) GetStartTimeMin() time.Time {
	if m != nil {
		return m.StartTimeMin
	}
	return time.Time{}
}

func (m *TraceQueryParameters) GetStartTimeMax() time.Time {
	if m != nil {
		return m.StartTimeMax
	}
	return time.Time{}
}

func (m *TraceQueryParameters) GetDurationMin() time.Duration {
	if m != nil {
		return m.DurationMin
	}
	return 0
}

func (m *TraceQueryParameters) GetDurationMax() time.Duration {
	if m != nil {
		return m.DurationMax
	}
	return 0
}

func (m *TraceQueryParameters) GetNumTraces() int32 {
	if m != nil {
		return m.NumTraces
	}
	return 0
}

type FindTracesRequest struct {
	Query *TraceQueryParameters `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *FindTracesRequest) Reset()                    { *m = FindTracesRequest{} }
func (m *FindTracesRequest) String() string            { return proto1.CompactTextString(m) }
func (*FindTracesRequest) ProtoMessage()               {}
func (*FindTracesRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{12} }

func (m *FindTracesRequest) GetQuery() *TraceQueryParameters {
	if m != nil {
		return m.Query
	}
	return nil
}

type FindTracesSuccess struct {
	Traces []*jaeger_api_v2.Trace `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty"`
}

func (m *FindTracesSuccess) Reset()                    { *m = FindTracesSuccess{} }
func (m *FindTracesSuccess) String() string            { return proto1.CompactTextString(m) }
func (*FindTracesSuccess) ProtoMessage()               {}
func (*FindTracesSuccess) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{13} }

func (m *FindTracesSuccess) GetTraces() []*jaeger_api_v2.Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

type FindTracesResponse struct {
	// Types that are valid to be assigned to Response:
	//	*FindTracesResponse_Success
	//	*FindTracesResponse_Error
	Response isFindTracesResponse_Response `protobuf_oneof:"response"`
}

func (m *FindTracesResponse) Reset()                    { *m = FindTracesResponse{} }
func (m *FindTracesResponse) String() string            { return proto1.CompactTextString(m) }
func (*FindTracesResponse) ProtoMessage()               {}
func (*FindTracesResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{14} }

type isFindTracesResponse_Response interface {
	isFindTracesResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FindTracesResponse_Success struct {
	Success *FindTracesSuccess `protobuf:"bytes,1,opt,name=success,oneof"`
}
type FindTracesResponse_Error struct {
	Error *StoragePluginError `protobuf:"bytes,2,opt,name=error,oneof"`
}

func (*FindTracesResponse_Success) isFindTracesResponse_Response() {}
func (*FindTracesResponse_Error) isFindTracesResponse_Response()   {}

func (m *FindTracesResponse) GetResponse() isFindTracesResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *FindTracesResponse) GetSuccess() *FindTracesSuccess {
	if x, ok := m.GetResponse().(*FindTracesResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (m *FindTracesResponse) GetError() *StoragePluginError {
	if x, ok := m.GetResponse().(*FindTracesResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FindTracesResponse) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _FindTracesResponse_OneofMarshaler, _FindTracesResponse_OneofUnmarshaler, _FindTracesResponse_OneofSizer, []interface{}{
		(*FindTracesResponse_Success)(nil),
		(*FindTracesResponse_Error)(nil),
	}
}

func _FindTracesResponse_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*FindTracesResponse)
	// response
	switch x := m.Response.(type) {
	case *FindTracesResponse_Success:
		_ = b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case *FindTracesResponse_Error:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FindTracesResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _FindTracesResponse_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*FindTracesResponse)
	switch tag {
	case 1: // response.success
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(FindTracesSuccess)
		err := b.DecodeMessage(msg)
		m.Response = &FindTracesResponse_Success{msg}
		return true, err
	case 2: // response.error
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StoragePluginError)
		err := b.DecodeMessage(msg)
		m.Response = &FindTracesResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FindTracesResponse_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*FindTracesResponse)
	// response
	switch x := m.Response.(type) {
	case *FindTracesResponse_Success:
		s := proto1.Size(x.Success)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *FindTracesResponse_Error:
		s := proto1.Size(x.Error)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FindTraceIDsRequest struct {
	Query *TraceQueryParameters `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *FindTraceIDsRequest) Reset()                    { *m = FindTraceIDsRequest{} }
func (m *FindTraceIDsRequest) String() string            { return proto1.CompactTextString(m) }
func (*FindTraceIDsRequest) ProtoMessage()               {}
func (*FindTraceIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{15} }

func (m *FindTraceIDsRequest) GetQuery() *TraceQueryParameters {
	if m != nil {
		return m.Query
	}
	return nil
}

type FindTraceIDsSuccess struct {
	TraceIDs []github_com_jaegertracing_jaeger_model.TraceID `protobuf:"bytes,1,rep,name=trace_id,json=traceId,customtype=github.com/jaegertracing/jaeger/model.TraceID" json:"trace_id"`
}

func (m *FindTraceIDsSuccess) Reset()                    { *m = FindTraceIDsSuccess{} }
func (m *FindTraceIDsSuccess) String() string            { return proto1.CompactTextString(m) }
func (*FindTraceIDsSuccess) ProtoMessage()               {}
func (*FindTraceIDsSuccess) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{16} }

type FindTraceIDsResponse struct {
	// Types that are valid to be assigned to Response:
	//	*FindTraceIDsResponse_Success
	//	*FindTraceIDsResponse_Error
	Response isFindTraceIDsResponse_Response `protobuf_oneof:"response"`
}

func (m *FindTraceIDsResponse) Reset()                    { *m = FindTraceIDsResponse{} }
func (m *FindTraceIDsResponse) String() string            { return proto1.CompactTextString(m) }
func (*FindTraceIDsResponse) ProtoMessage()               {}
func (*FindTraceIDsResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{17} }

type isFindTraceIDsResponse_Response interface {
	isFindTraceIDsResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FindTraceIDsResponse_Success struct {
	Success *FindTraceIDsSuccess `protobuf:"bytes,1,opt,name=success,oneof"`
}
type FindTraceIDsResponse_Error struct {
	Error *StoragePluginError `protobuf:"bytes,2,opt,name=error,oneof"`
}

func (*FindTraceIDsResponse_Success) isFindTraceIDsResponse_Response() {}
func (*FindTraceIDsResponse_Error) isFindTraceIDsResponse_Response()   {}

func (m *FindTraceIDsResponse) GetResponse() isFindTraceIDsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *FindTraceIDsResponse) GetSuccess() *FindTraceIDsSuccess {
	if x, ok := m.GetResponse().(*FindTraceIDsResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (m *FindTraceIDsResponse) GetError() *StoragePluginError {
	if x, ok := m.GetResponse().(*FindTraceIDsResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FindTraceIDsResponse) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _FindTraceIDsResponse_OneofMarshaler, _FindTraceIDsResponse_OneofUnmarshaler, _FindTraceIDsResponse_OneofSizer, []interface{}{
		(*FindTraceIDsResponse_Success)(nil),
		(*FindTraceIDsResponse_Error)(nil),
	}
}

func _FindTraceIDsResponse_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*FindTraceIDsResponse)
	// response
	switch x := m.Response.(type) {
	case *FindTraceIDsResponse_Success:
		_ = b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case *FindTraceIDsResponse_Error:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FindTraceIDsResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _FindTraceIDsResponse_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*FindTraceIDsResponse)
	switch tag {
	case 1: // response.success
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(FindTraceIDsSuccess)
		err := b.DecodeMessage(msg)
		m.Response = &FindTraceIDsResponse_Success{msg}
		return true, err
	case 2: // response.error
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(StoragePluginError)
		err := b.DecodeMessage(msg)
		m.Response = &FindTraceIDsResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FindTraceIDsResponse_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*FindTraceIDsResponse)
	// response
	switch x := m.Response.(type) {
	case *FindTraceIDsResponse_Success:
		s := proto1.Size(x.Success)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *FindTraceIDsResponse_Error:
		s := proto1.Size(x.Error)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto1.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{18} }

type StoragePluginError struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *StoragePluginError) Reset()                    { *m = StoragePluginError{} }
func (m *StoragePluginError) String() string            { return proto1.CompactTextString(m) }
func (*StoragePluginError) ProtoMessage()               {}
func (*StoragePluginError) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{19} }

func (m *StoragePluginError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*WriteSpanRequest)(nil), "jaeger.api_v2.WriteSpanRequest")
	golang_proto.RegisterType((*WriteSpanRequest)(nil), "jaeger.api_v2.WriteSpanRequest")
	proto1.RegisterType((*WriteSpanResponse)(nil), "jaeger.api_v2.WriteSpanResponse")
	golang_proto.RegisterType((*WriteSpanResponse)(nil), "jaeger.api_v2.WriteSpanResponse")
	proto1.RegisterType((*GetTraceRequest)(nil), "jaeger.api_v2.GetTraceRequest")
	golang_proto.RegisterType((*GetTraceRequest)(nil), "jaeger.api_v2.GetTraceRequest")
	proto1.RegisterType((*GetTraceSuccess)(nil), "jaeger.api_v2.GetTraceSuccess")
	golang_proto.RegisterType((*GetTraceSuccess)(nil), "jaeger.api_v2.GetTraceSuccess")
	proto1.RegisterType((*GetTraceResponse)(nil), "jaeger.api_v2.GetTraceResponse")
	golang_proto.RegisterType((*GetTraceResponse)(nil), "jaeger.api_v2.GetTraceResponse")
	proto1.RegisterType((*GetServicesRequest)(nil), "jaeger.api_v2.GetServicesRequest")
	golang_proto.RegisterType((*GetServicesRequest)(nil), "jaeger.api_v2.GetServicesRequest")
	proto1.RegisterType((*GetServicesSuccess)(nil), "jaeger.api_v2.GetServicesSuccess")
	golang_proto.RegisterType((*GetServicesSuccess)(nil), "jaeger.api_v2.GetServicesSuccess")
	proto1.RegisterType((*GetServicesResponse)(nil), "jaeger.api_v2.GetServicesResponse")
	golang_proto.RegisterType((*GetServicesResponse)(nil), "jaeger.api_v2.GetServicesResponse")
	proto1.RegisterType((*GetOperationsRequest)(nil), "jaeger.api_v2.GetOperationsRequest")
	golang_proto.RegisterType((*GetOperationsRequest)(nil), "jaeger.api_v2.GetOperationsRequest")
	proto1.RegisterType((*GetOperationsSuccess)(nil), "jaeger.api_v2.GetOperationsSuccess")
	golang_proto.RegisterType((*GetOperationsSuccess)(nil), "jaeger.api_v2.GetOperationsSuccess")
	proto1.RegisterType((*GetOperationsResponse)(nil), "jaeger.api_v2.GetOperationsResponse")
	golang_proto.RegisterType((*GetOperationsResponse)(nil), "jaeger.api_v2.GetOperationsResponse")
	proto1.RegisterType((*TraceQueryParameters)(nil), "jaeger.api_v2.TraceQueryParameters")
	golang_proto.RegisterType((*TraceQueryParameters)(nil), "jaeger.api_v2.TraceQueryParameters")
	proto1.RegisterType((*FindTracesRequest)(nil), "jaeger.api_v2.FindTracesRequest")
	golang_proto.RegisterType((*FindTracesRequest)(nil), "jaeger.api_v2.FindTracesRequest")
	proto1.RegisterType((*FindTracesSuccess)(nil), "jaeger.api_v2.FindTracesSuccess")
	golang_proto.RegisterType((*FindTracesSuccess)(nil), "jaeger.api_v2.FindTracesSuccess")
	proto1.RegisterType((*FindTracesResponse)(nil), "jaeger.api_v2.FindTracesResponse")
	golang_proto.RegisterType((*FindTracesResponse)(nil), "jaeger.api_v2.FindTracesResponse")
	proto1.RegisterType((*FindTraceIDsRequest)(nil), "jaeger.api_v2.FindTraceIDsRequest")
	golang_proto.RegisterType((*FindTraceIDsRequest)(nil), "jaeger.api_v2.FindTraceIDsRequest")
	proto1.RegisterType((*FindTraceIDsSuccess)(nil), "jaeger.api_v2.FindTraceIDsSuccess")
	golang_proto.RegisterType((*FindTraceIDsSuccess)(nil), "jaeger.api_v2.FindTraceIDsSuccess")
	proto1.RegisterType((*FindTraceIDsResponse)(nil), "jaeger.api_v2.FindTraceIDsResponse")
	golang_proto.RegisterType((*FindTraceIDsResponse)(nil), "jaeger.api_v2.FindTraceIDsResponse")
	proto1.RegisterType((*EmptyResponse)(nil), "jaeger.api_v2.EmptyResponse")
	golang_proto.RegisterType((*EmptyResponse)(nil), "jaeger.api_v2.EmptyResponse")
	proto1.RegisterType((*StoragePluginError)(nil), "jaeger.api_v2.StoragePluginError")
	golang_proto.RegisterType((*StoragePluginError)(nil), "jaeger.api_v2.StoragePluginError")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StoragePlugin service

type StoragePluginClient interface {
	// spanstore/Writer
	WriteSpan(ctx context.Context, in *WriteSpanRequest, opts ...grpc.CallOption) (*WriteSpanResponse, error)
	// spanstore/Reader
	GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error)
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
	GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error)
	FindTraces(ctx context.Context, in *FindTracesRequest, opts ...grpc.CallOption) (*FindTracesResponse, error)
	FindTraceIDs(ctx context.Context, in *FindTraceIDsRequest, opts ...grpc.CallOption) (*FindTraceIDsResponse, error)
}

type storagePluginClient struct {
	cc *grpc.ClientConn
}

func NewStoragePluginClient(cc *grpc.ClientConn) StoragePluginClient {
	return &storagePluginClient{cc}
}

func (c *storagePluginClient) WriteSpan(ctx context.Context, in *WriteSpanRequest, opts ...grpc.CallOption) (*WriteSpanResponse, error) {
	out := new(WriteSpanResponse)
	err := grpc.Invoke(ctx, "/jaeger.api_v2.StoragePlugin/WriteSpan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagePluginClient) GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error) {
	out := new(GetTraceResponse)
	err := grpc.Invoke(ctx, "/jaeger.api_v2.StoragePlugin/GetTrace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagePluginClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	out := new(GetServicesResponse)
	err := grpc.Invoke(ctx, "/jaeger.api_v2.StoragePlugin/GetServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagePluginClient) GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error) {
	out := new(GetOperationsResponse)
	err := grpc.Invoke(ctx, "/jaeger.api_v2.StoragePlugin/GetOperations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagePluginClient) FindTraces(ctx context.Context, in *FindTracesRequest, opts ...grpc.CallOption) (*FindTracesResponse, error) {
	out := new(FindTracesResponse)
	err := grpc.Invoke(ctx, "/jaeger.api_v2.StoragePlugin/FindTraces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagePluginClient) FindTraceIDs(ctx context.Context, in *FindTraceIDsRequest, opts ...grpc.CallOption) (*FindTraceIDsResponse, error) {
	out := new(FindTraceIDsResponse)
	err := grpc.Invoke(ctx, "/jaeger.api_v2.StoragePlugin/FindTraceIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StoragePlugin service

type StoragePluginServer interface {
	// spanstore/Writer
	WriteSpan(context.Context, *WriteSpanRequest) (*WriteSpanResponse, error)
	// spanstore/Reader
	GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error)
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
	GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error)
	FindTraces(context.Context, *FindTracesRequest) (*FindTracesResponse, error)
	FindTraceIDs(context.Context, *FindTraceIDsRequest) (*FindTraceIDsResponse, error)
}

func RegisterStoragePluginServer(s *grpc.Server, srv StoragePluginServer) {
	s.RegisterService(&_StoragePlugin_serviceDesc, srv)
}

func _StoragePlugin_WriteSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).WriteSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.StoragePlugin/WriteSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).WriteSpan(ctx, req.(*WriteSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoragePlugin_GetTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).GetTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.StoragePlugin/GetTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).GetTrace(ctx, req.(*GetTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoragePlugin_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.StoragePlugin/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoragePlugin_GetOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).GetOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.StoragePlugin/GetOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).GetOperations(ctx, req.(*GetOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoragePlugin_FindTraces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTracesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).FindTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.StoragePlugin/FindTraces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).FindTraces(ctx, req.(*FindTracesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoragePlugin_FindTraceIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTraceIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).FindTraceIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jaeger.api_v2.StoragePlugin/FindTraceIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).FindTraceIDs(ctx, req.(*FindTraceIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StoragePlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jaeger.api_v2.StoragePlugin",
	HandlerType: (*StoragePluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteSpan",
			Handler:    _StoragePlugin_WriteSpan_Handler,
		},
		{
			MethodName: "GetTrace",
			Handler:    _StoragePlugin_GetTrace_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _StoragePlugin_GetServices_Handler,
		},
		{
			MethodName: "GetOperations",
			Handler:    _StoragePlugin_GetOperations_Handler,
		},
		{
			MethodName: "FindTraces",
			Handler:    _StoragePlugin_FindTraces_Handler,
		},
		{
			MethodName: "FindTraceIDs",
			Handler:    _StoragePlugin_FindTraceIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}

func (m *WriteSpanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteSpanRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Span != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Span.Size()))
		n1, err := m.Span.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *WriteSpanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteSpanResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn2, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *WriteSpanResponse_Success) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Success != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Success.Size()))
		n3, err := m.Success.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *WriteSpanResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Error.Size()))
		n4, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *GetTraceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTraceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStorage(dAtA, i, uint64(m.TraceID.Size()))
	n5, err := m.TraceID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *GetTraceSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTraceSuccess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Trace != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Trace.Size()))
		n6, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *GetTraceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTraceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn7, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *GetTraceResponse_Success) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Success != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Success.Size()))
		n8, err := m.Success.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *GetTraceResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Error.Size()))
		n9, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *GetServicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServicesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetServicesSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServicesSuccess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetServicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn10, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	return i, nil
}

func (m *GetServicesResponse_Success) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Success != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Success.Size()))
		n11, err := m.Success.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *GetServicesResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Error.Size()))
		n12, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *GetOperationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOperationsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	return i, nil
}

func (m *GetOperationsSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOperationsSuccess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Operations) > 0 {
		for _, s := range m.Operations {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetOperationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOperationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn13, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	return i, nil
}

func (m *GetOperationsResponse_Success) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Success != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Success.Size()))
		n14, err := m.Success.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *GetOperationsResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Error.Size()))
		n15, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *TraceQueryParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceQueryParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if len(m.OperationName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.OperationName)))
		i += copy(dAtA[i:], m.OperationName)
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x1a
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovStorage(uint64(len(k))) + 1 + len(v) + sovStorage(uint64(len(v)))
			i = encodeVarintStorage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintStorage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintStorage(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintStorage(dAtA, i, uint64(types.SizeOfStdTime(m.StartTimeMin)))
	n16, err := types.StdTimeMarshalTo(m.StartTimeMin, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x2a
	i++
	i = encodeVarintStorage(dAtA, i, uint64(types.SizeOfStdTime(m.StartTimeMax)))
	n17, err := types.StdTimeMarshalTo(m.StartTimeMax, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x32
	i++
	i = encodeVarintStorage(dAtA, i, uint64(types.SizeOfStdDuration(m.DurationMin)))
	n18, err := types.StdDurationMarshalTo(m.DurationMin, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x3a
	i++
	i = encodeVarintStorage(dAtA, i, uint64(types.SizeOfStdDuration(m.DurationMax)))
	n19, err := types.StdDurationMarshalTo(m.DurationMax, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if m.NumTraces != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.NumTraces))
	}
	return i, nil
}

func (m *FindTracesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindTracesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Query != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Query.Size()))
		n20, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *FindTracesSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindTracesSuccess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Traces) > 0 {
		for _, msg := range m.Traces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintStorage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FindTracesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindTracesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn21, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn21
	}
	return i, nil
}

func (m *FindTracesResponse_Success) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Success != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Success.Size()))
		n22, err := m.Success.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *FindTracesResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Error.Size()))
		n23, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *FindTraceIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindTraceIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Query != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Query.Size()))
		n24, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *FindTraceIDsSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindTraceIDsSuccess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TraceIDs) > 0 {
		for _, msg := range m.TraceIDs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintStorage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FindTraceIDsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindTraceIDsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn25, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn25
	}
	return i, nil
}

func (m *FindTraceIDsResponse_Success) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Success != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Success.Size()))
		n26, err := m.Success.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *FindTraceIDsResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Error.Size()))
		n27, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *EmptyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StoragePluginError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoragePluginError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WriteSpanRequest) Size() (n int) {
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *WriteSpanResponse) Size() (n int) {
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *WriteSpanResponse_Success) Size() (n int) {
	var l int
	_ = l
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *WriteSpanResponse_Error) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *GetTraceRequest) Size() (n int) {
	var l int
	_ = l
	l = m.TraceID.Size()
	n += 1 + l + sovStorage(uint64(l))
	return n
}

func (m *GetTraceSuccess) Size() (n int) {
	var l int
	_ = l
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *GetTraceResponse) Size() (n int) {
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *GetTraceResponse_Success) Size() (n int) {
	var l int
	_ = l
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *GetTraceResponse_Error) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *GetServicesRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetServicesSuccess) Size() (n int) {
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			l = len(s)
			n += 1 + l + sovStorage(uint64(l))
		}
	}
	return n
}

func (m *GetServicesResponse) Size() (n int) {
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *GetServicesResponse_Success) Size() (n int) {
	var l int
	_ = l
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *GetServicesResponse_Error) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *GetOperationsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *GetOperationsSuccess) Size() (n int) {
	var l int
	_ = l
	if len(m.Operations) > 0 {
		for _, s := range m.Operations {
			l = len(s)
			n += 1 + l + sovStorage(uint64(l))
		}
	}
	return n
}

func (m *GetOperationsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *GetOperationsResponse_Success) Size() (n int) {
	var l int
	_ = l
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *GetOperationsResponse_Error) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *TraceQueryParameters) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.OperationName)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStorage(uint64(len(k))) + 1 + len(v) + sovStorage(uint64(len(v)))
			n += mapEntrySize + 1 + sovStorage(uint64(mapEntrySize))
		}
	}
	l = types.SizeOfStdTime(m.StartTimeMin)
	n += 1 + l + sovStorage(uint64(l))
	l = types.SizeOfStdTime(m.StartTimeMax)
	n += 1 + l + sovStorage(uint64(l))
	l = types.SizeOfStdDuration(m.DurationMin)
	n += 1 + l + sovStorage(uint64(l))
	l = types.SizeOfStdDuration(m.DurationMax)
	n += 1 + l + sovStorage(uint64(l))
	if m.NumTraces != 0 {
		n += 1 + sovStorage(uint64(m.NumTraces))
	}
	return n
}

func (m *FindTracesRequest) Size() (n int) {
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *FindTracesSuccess) Size() (n int) {
	var l int
	_ = l
	if len(m.Traces) > 0 {
		for _, e := range m.Traces {
			l = e.Size()
			n += 1 + l + sovStorage(uint64(l))
		}
	}
	return n
}

func (m *FindTracesResponse) Size() (n int) {
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *FindTracesResponse_Success) Size() (n int) {
	var l int
	_ = l
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *FindTracesResponse_Error) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *FindTraceIDsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *FindTraceIDsSuccess) Size() (n int) {
	var l int
	_ = l
	if len(m.TraceIDs) > 0 {
		for _, e := range m.TraceIDs {
			l = e.Size()
			n += 1 + l + sovStorage(uint64(l))
		}
	}
	return n
}

func (m *FindTraceIDsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *FindTraceIDsResponse_Success) Size() (n int) {
	var l int
	_ = l
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *FindTraceIDsResponse_Error) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}
func (m *EmptyResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StoragePluginError) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func sovStorage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WriteSpanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteSpanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteSpanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &jaeger_api_v2.Span{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteSpanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteSpanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteSpanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmptyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &WriteSpanResponse_Success{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StoragePluginError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &WriteSpanResponse_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTraceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTraceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTraceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TraceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTraceSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTraceSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTraceSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &jaeger_api_v2.Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTraceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTraceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTraceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetTraceSuccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GetTraceResponse_Success{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StoragePluginError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GetTraceResponse_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServicesSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServicesSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServicesSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetServicesSuccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GetServicesResponse_Success{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StoragePluginError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GetServicesResponse_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOperationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOperationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOperationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOperationsSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOperationsSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOperationsSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOperationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOperationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOperationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetOperationsSuccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GetOperationsResponse_Success{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StoragePluginError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &GetOperationsResponse_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceQueryParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceQueryParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceQueryParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStorage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStorage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStorage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStorage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthStorage
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStorage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthStorage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeMin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.StartTimeMin, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.StartTimeMax, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationMin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdDurationUnmarshal(&m.DurationMin, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdDurationUnmarshal(&m.DurationMax, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTraces", wireType)
			}
			m.NumTraces = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTraces |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindTracesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindTracesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindTracesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &TraceQueryParameters{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindTracesSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindTracesSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindTracesSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Traces = append(m.Traces, &jaeger_api_v2.Trace{})
			if err := m.Traces[len(m.Traces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindTracesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindTracesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindTracesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FindTracesSuccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &FindTracesResponse_Success{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StoragePluginError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &FindTracesResponse_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindTraceIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindTraceIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindTraceIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &TraceQueryParameters{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindTraceIDsSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindTraceIDsSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindTraceIDsSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_jaegertracing_jaeger_model.TraceID
			m.TraceIDs = append(m.TraceIDs, v)
			if err := m.TraceIDs[len(m.TraceIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindTraceIDsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindTraceIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindTraceIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FindTraceIDsSuccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &FindTraceIDsResponse_Success{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StoragePluginError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &FindTraceIDsResponse_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoragePluginError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoragePluginError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoragePluginError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStorage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStorage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStorage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("storage.proto", fileDescriptorStorage) }
func init() { golang_proto.RegisterFile("storage.proto", fileDescriptorStorage) }

var fileDescriptorStorage = []byte{
	// 953 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xc4, 0x76, 0x6c, 0x3f, 0xdb, 0x6d, 0x3a, 0x31, 0xc2, 0x58, 0x60, 0x3b, 0x5b, 0x10,
	0x16, 0xa2, 0xeb, 0x2a, 0x48, 0xd0, 0x16, 0x0a, 0xc4, 0x4a, 0x9a, 0x06, 0x44, 0x48, 0x37, 0x91,
	0x2a, 0x15, 0x24, 0x6b, 0x6a, 0x0f, 0xcb, 0x42, 0x76, 0xd7, 0xdd, 0x99, 0x8d, 0x92, 0xaf, 0xc0,
	0x89, 0x03, 0x48, 0x20, 0x84, 0x38, 0xf0, 0x45, 0x38, 0xe6, 0xc8, 0x99, 0x43, 0x40, 0xe1, 0x8b,
	0xa0, 0x9d, 0x3f, 0x1b, 0xef, 0x38, 0xf6, 0x21, 0xc2, 0x27, 0x7b, 0x66, 0x7e, 0xef, 0xf7, 0xde,
	0xfb, 0xcd, 0xbc, 0xf7, 0x16, 0x6a, 0x8c, 0x87, 0x11, 0x71, 0xa9, 0x3d, 0x8e, 0x42, 0x1e, 0xe2,
	0xda, 0x37, 0x84, 0xba, 0x34, 0xb2, 0xc9, 0xd8, 0x1b, 0x1c, 0x6f, 0x34, 0xeb, 0x6e, 0xe8, 0x86,
	0xe2, 0xa4, 0x97, 0xfc, 0x93, 0xa0, 0x66, 0xc5, 0x0f, 0x47, 0xf4, 0x48, 0x2d, 0xda, 0x6e, 0x18,
	0xba, 0x47, 0xb4, 0x27, 0x56, 0xcf, 0xe3, 0xaf, 0x7a, 0xdc, 0xf3, 0x29, 0xe3, 0xc4, 0x1f, 0x2b,
	0x40, 0xcb, 0x04, 0x8c, 0xe2, 0x88, 0x70, 0x2f, 0x0c, 0xe4, 0xb9, 0xf5, 0x3e, 0xac, 0x3e, 0x8d,
	0x3c, 0x4e, 0x0f, 0xc6, 0x24, 0x70, 0xe8, 0x8b, 0x98, 0x32, 0x8e, 0xdf, 0x84, 0x3c, 0x1b, 0x93,
	0xa0, 0x81, 0x3a, 0xa8, 0x5b, 0xd9, 0x58, 0xb3, 0x33, 0x51, 0xd9, 0x02, 0x29, 0x00, 0xd6, 0x0f,
	0x08, 0x6e, 0x4d, 0x58, 0xb3, 0x71, 0x18, 0x30, 0x8a, 0xef, 0x41, 0x91, 0xc5, 0xc3, 0x21, 0x65,
	0x4c, 0x31, 0xbc, 0x6a, 0x30, 0x6c, 0xfb, 0x63, 0x7e, 0xaa, 0xe1, 0x8f, 0x97, 0x1c, 0x0d, 0xc7,
	0xf7, 0xa1, 0x40, 0xa3, 0x28, 0x8c, 0x1a, 0xcb, 0xc2, 0x6e, 0xdd, 0xf4, 0x2c, 0xc5, 0xda, 0x3f,
	0x8a, 0x5d, 0x2f, 0xd8, 0x4e, 0x80, 0x8f, 0x97, 0x1c, 0x69, 0xd1, 0x07, 0x28, 0x45, 0x8a, 0xd1,
	0x0a, 0xe0, 0xe6, 0x0e, 0xe5, 0x87, 0x11, 0x19, 0x52, 0x9d, 0xd2, 0x17, 0x50, 0xe2, 0xc9, 0x7a,
	0xe0, 0x8d, 0x44, 0x50, 0xd5, 0xfe, 0xc7, 0x67, 0xe7, 0xed, 0xa5, 0xbf, 0xce, 0xdb, 0x77, 0x5c,
	0x8f, 0x7f, 0x1d, 0x3f, 0xb7, 0x87, 0xa1, 0xdf, 0x93, 0xee, 0x12, 0xa0, 0x17, 0xb8, 0x6a, 0xd5,
	0x93, 0x72, 0x0b, 0xb6, 0xdd, 0xad, 0x8b, 0xf3, 0x76, 0x51, 0xfd, 0x75, 0x8a, 0x82, 0x71, 0x77,
	0x64, 0x3d, 0xbc, 0xf4, 0x77, 0xa0, 0x32, 0x79, 0x0b, 0x0a, 0xe2, 0x54, 0x29, 0x50, 0x37, 0x32,
	0x91, 0xb1, 0x49, 0x88, 0xf5, 0x23, 0x82, 0xd5, 0xcb, 0x78, 0x95, 0x88, 0x0f, 0x4c, 0x11, 0x5b,
	0x06, 0x85, 0xe1, 0x71, 0x01, 0x32, 0xd6, 0x01, 0xef, 0x50, 0x7e, 0x40, 0xa3, 0x63, 0x6f, 0x48,
	0x99, 0x52, 0xd2, 0xba, 0x9b, 0xd9, 0xd5, 0xf9, 0x36, 0xa1, 0xc4, 0xd4, 0x56, 0x03, 0x75, 0x72,
	0xdd, 0xb2, 0x93, 0xae, 0xad, 0x5f, 0x10, 0xac, 0x65, 0x88, 0x54, 0x8a, 0x0f, 0xcd, 0x14, 0xd7,
	0xa7, 0x53, 0x34, 0xfc, 0x2c, 0x20, 0xcb, 0xbb, 0x50, 0xdf, 0xa1, 0xfc, 0xf3, 0x31, 0x95, 0x65,
	0xa1, 0xf3, 0xc4, 0x0d, 0x28, 0xaa, 0x0c, 0x44, 0x74, 0x65, 0x47, 0x2f, 0xad, 0x77, 0x0d, 0x0b,
	0xad, 0x41, 0x0b, 0x20, 0x4c, 0x37, 0x95, 0x0a, 0x13, 0x3b, 0xd6, 0x6f, 0x08, 0x5e, 0x32, 0x5c,
	0x29, 0x25, 0x3e, 0x32, 0x95, 0xb8, 0x3d, 0xad, 0xc4, 0x94, 0xbf, 0x05, 0x68, 0xf1, 0x7b, 0x1e,
	0xea, 0xe2, 0x51, 0x3d, 0x89, 0x69, 0x74, 0xba, 0x4f, 0x22, 0xe2, 0x53, 0x4e, 0x23, 0x86, 0xd7,
	0xa1, 0xaa, 0xb2, 0x1f, 0x04, 0xc4, 0xd7, 0x8a, 0x54, 0xd4, 0xde, 0x1e, 0xf1, 0x29, 0x7e, 0x03,
	0x6e, 0xa4, 0xb9, 0x4a, 0xd0, 0xb2, 0x00, 0xd5, 0xd2, 0x5d, 0x01, 0xdb, 0x84, 0x3c, 0x27, 0x2e,
	0x6b, 0xe4, 0x3a, 0xb9, 0x6e, 0x65, 0xe3, 0xce, 0x55, 0x75, 0x61, 0x38, 0xb7, 0x0f, 0x89, 0xcb,
	0xb6, 0x03, 0x1e, 0x9d, 0x3a, 0xc2, 0x14, 0x7f, 0x02, 0x37, 0x18, 0x27, 0x11, 0x1f, 0x24, 0xbd,
	0x6e, 0xe0, 0x7b, 0x41, 0x23, 0x2f, 0xb2, 0x6e, 0xda, 0xb2, 0xd7, 0xd9, 0xba, 0xd7, 0xd9, 0x87,
	0xba, 0x19, 0xf6, 0x4b, 0x49, 0xb5, 0x7f, 0xff, 0x77, 0x1b, 0x39, 0x55, 0x61, 0x9b, 0x9c, 0x7c,
	0xe6, 0x05, 0x26, 0x17, 0x39, 0x69, 0x14, 0xae, 0xc7, 0x45, 0x4e, 0xf0, 0x23, 0xa8, 0xea, 0xe6,
	0x2a, 0xa2, 0x5a, 0x11, 0x4c, 0xaf, 0x4c, 0x31, 0x6d, 0x29, 0x90, 0x24, 0xfa, 0x29, 0x21, 0xaa,
	0x68, 0xc3, 0x24, 0xa6, 0x0c, 0x0f, 0x39, 0x69, 0x14, 0xaf, 0xc3, 0x43, 0x4e, 0xf0, 0x6b, 0x00,
	0x41, 0xec, 0x0f, 0x44, 0x93, 0x61, 0x8d, 0x52, 0x07, 0x75, 0x0b, 0x4e, 0x39, 0x88, 0x7d, 0x21,
	0x32, 0x6b, 0xbe, 0x07, 0xe5, 0x54, 0x59, 0xbc, 0x0a, 0xb9, 0x6f, 0xe9, 0xa9, 0xba, 0xd7, 0xe4,
	0x2f, 0xae, 0x43, 0xe1, 0x98, 0x1c, 0xc5, 0xfa, 0x1a, 0xe5, 0xe2, 0xc1, 0xf2, 0x3d, 0x64, 0xed,
	0xc1, 0xad, 0x47, 0x5e, 0x30, 0x92, 0x34, 0xba, 0x5c, 0xee, 0x43, 0xe1, 0x45, 0x72, 0x6f, 0x33,
	0x1e, 0xf0, 0x55, 0x17, 0xeb, 0x48, 0x0b, 0x6b, 0x73, 0x92, 0x4f, 0x17, 0xd3, 0xdb, 0xb0, 0xa2,
	0x02, 0x47, 0xe2, 0xa5, 0x5c, 0xdd, 0x41, 0x15, 0xc6, 0xfa, 0x19, 0x01, 0x9e, 0x8c, 0x49, 0xd5,
	0xd5, 0x07, 0x66, 0x5d, 0x75, 0x0c, 0x96, 0x29, 0xbf, 0x0b, 0x28, 0xaa, 0x7d, 0x58, 0x4b, 0xdd,
	0xec, 0x6e, 0xfd, 0x1f, 0x82, 0xb1, 0x2c, 0xa3, 0x96, 0xec, 0xcb, 0xcc, 0x8c, 0xcb, 0x75, 0xab,
	0xfd, 0xcd, 0xeb, 0xce, 0xb8, 0x52, 0x1a, 0x6d, 0x3a, 0xe4, 0x7e, 0x45, 0x50, 0xcf, 0xe6, 0xa1,
	0x44, 0xfe, 0xd0, 0x14, 0xd9, 0x9a, 0x25, 0xf2, 0x65, 0xac, 0x0b, 0x90, 0xf9, 0x26, 0xd4, 0x32,
	0xdf, 0x15, 0x96, 0x0d, 0x78, 0xda, 0x36, 0x69, 0xeb, 0x3e, 0x65, 0x8c, 0xb8, 0x69, 0x5b, 0x57,
	0xcb, 0x8d, 0xef, 0xf2, 0x50, 0xcb, 0x18, 0xe0, 0x3d, 0x28, 0xa7, 0x5f, 0x37, 0xb8, 0x6d, 0xc4,
	0x65, 0x7e, 0x35, 0x35, 0x3b, 0xb3, 0x01, 0x4a, 0xa9, 0x4f, 0xa1, 0xa4, 0xa7, 0x36, 0x9e, 0x35,
	0xce, 0x35, 0x5b, 0x7b, 0xe6, 0xb9, 0x22, 0x3b, 0x84, 0xca, 0xc4, 0x7c, 0xc4, 0x73, 0x66, 0xa7,
	0xa6, 0xb4, 0xe6, 0x41, 0x14, 0xeb, 0x33, 0xa8, 0x65, 0x66, 0x0d, 0x9e, 0x3b, 0x89, 0x34, 0xf3,
	0xeb, 0xf3, 0x41, 0x8a, 0xfb, 0x09, 0xc0, 0x65, 0xbd, 0xe1, 0xd9, 0xa5, 0xa8, 0x59, 0xd7, 0xe7,
	0x20, 0x14, 0xe5, 0x53, 0xa8, 0x4e, 0xbe, 0x2e, 0x3c, 0xef, 0xe9, 0x69, 0xda, 0xdb, 0x73, 0x31,
	0x92, 0xb8, 0xff, 0xf2, 0xd9, 0x45, 0x0b, 0xfd, 0x79, 0xd1, 0x42, 0xff, 0x5c, 0xb4, 0xd0, 0x1f,
	0xff, 0xb6, 0xd0, 0xb3, 0x82, 0xec, 0xbb, 0x2b, 0xe2, 0xe7, 0x9d, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xab, 0x39, 0x5b, 0xdc, 0xba, 0x0b, 0x00, 0x00,
}
