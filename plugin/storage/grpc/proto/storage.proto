syntax = "proto3";

package jaeger.storage.v1;

option go_package = "api_v1";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

import "model.proto";

// Enable gogoprotobuf extensions (https://github.com/gogo/protobuf/blob/master/extensions.md).
// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;

message GetDependenciesRequest {
    google.protobuf.Timestamp end_timestamp = 1 [
                                                (gogoproto.stdtime) = true,
                                                (gogoproto.nullable) = false
                                                ];
    google.protobuf.Duration lookback = 2 [
                                          (gogoproto.stdduration) = true,
                                          (gogoproto.nullable) = false
                                          ];
}

message GetDependenciesSuccess {
    repeated bytes dependencies = 1 [
                                    (gogoproto.nullable) = false,
                                    (gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.DependencyLink"
                                    ];
}

message GetDependenciesResponse {
    oneof response {
        GetDependenciesSuccess success = 1;
        GrpcStoragePluginError error = 2;
    }
}

message WriteSpanRequest {
    jaeger.api_v2.Span span = 1;
}

message WriteSpanResponse {
    oneof response {
        google.protobuf.Empty success = 1;
        GrpcStoragePluginError error = 2;
    }
}

message GetTraceRequest {
    bytes trace_id = 1 [
                       (gogoproto.nullable) = false,
                       (gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID",
                       (gogoproto.customname) = "TraceID"
                       ];
}

message GetTraceSuccess {
    jaeger.api_v2.Trace trace = 1;
}

message GetTraceResponse {
    oneof response {
        GetTraceSuccess success = 1;
        GrpcStoragePluginError error = 2;
    }
}

message GetServicesRequest {}

message GetServicesSuccess {
    repeated string services = 1;
}

message GetServicesResponse {
    oneof response {
        GetServicesSuccess success = 1;
        GrpcStoragePluginError error = 2;
    }
}

message GetOperationsRequest {
    string service = 1;
}

message GetOperationsSuccess {
    repeated string operations = 1;
}

message GetOperationsResponse {
    oneof response {
        GetOperationsSuccess success = 1;
        google.protobuf.Empty error = 2;
    }
}

message TraceQueryParameters {
    string service_name = 1;
    string operation_name = 2;
    map<string, string> tags = 3;
    google.protobuf.Timestamp start_time_min = 4 [
                                                 (gogoproto.stdtime) = true,
                                                 (gogoproto.nullable) = false
                                                 ];
    google.protobuf.Timestamp start_time_max = 5 [
                                                 (gogoproto.stdtime) = true,
                                                 (gogoproto.nullable) = false
                                                 ];
    google.protobuf.Duration duration_min = 6 [
                                              (gogoproto.stdduration) = true,
                                              (gogoproto.nullable) = false
                                              ];
    google.protobuf.Duration duration_max = 7 [
                                              (gogoproto.stdduration) = true,
                                              (gogoproto.nullable) = false
                                              ];
    int32 num_traces = 8;
}

message FindTracesRequest {
    TraceQueryParameters query = 1;
}

message FindTracesResponseChunk {
    repeated bytes spans = 1  [
                              (gogoproto.nullable) = false,
                              (gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.Span"
                              ];
}

message FindTraceIDsRequest {
    TraceQueryParameters query = 1;
}

message FindTraceIDsSuccess {
    repeated bytes trace_id = 1 [
                                (gogoproto.nullable) = false,
                                (gogoproto.customtype) = "github.com/jaegertracing/jaeger/model.TraceID",
                                (gogoproto.customname) = "TraceIDs"
                                ];
}

message FindTraceIDsResponse {
    oneof response {
        FindTraceIDsSuccess success = 1;
        GrpcStoragePluginError error = 2;
    }
}

message GrpcStoragePluginError {
    string message = 1;
}

service SpanWriterPlugin {
    // spanstore/Writer
    rpc WriteSpan(WriteSpanRequest) returns (WriteSpanResponse);
}

service SpanReaderPlugin {
    // spanstore/Reader
    rpc GetTrace(GetTraceRequest) returns (GetTraceResponse);
    rpc GetServices(GetServicesRequest) returns (GetServicesResponse);
    rpc GetOperations(GetOperationsRequest) returns (GetOperationsResponse);
    rpc FindTraces(FindTracesRequest) returns (stream FindTracesResponseChunk);
    rpc FindTraceIDs(FindTraceIDsRequest) returns (FindTraceIDsResponse);
}

service DependenciesReaderPlugin {
    // dependencystore/Writer
    //    rpc WriteDependencies(WriteDependenciesRequest) returns (WriteDependenciesResponse);
    // dependencystore/Reader
    rpc GetDependencies(GetDependenciesRequest) returns (GetDependenciesResponse);
}
