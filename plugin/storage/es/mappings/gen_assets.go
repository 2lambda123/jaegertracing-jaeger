// Code generated by "esc -pkg mappings -o plugin/storage/es/mappings/gen_assets.go -ignore assets -prefix plugin/storage/es/mappings plugin/storage/es/mappings"; DO NOT EDIT.

package mappings

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/.nocover": {
		name:    ".nocover",
		local:   "plugin/storage/es/mappings/.nocover",
		size:    43,
		modtime: 1606485401,
		compressed: `
H4sIAAAAAAAC/youSSzJzFYoSEzOTkxPVcjILy4pVkgsLcnXTU/NSy1KLElNUUjLzEkt1uMCBAAA//8y
IKK1KwAAAA==
`,
	},

	"/jaeger-dependencies-7.json": {
		name:    "jaeger-dependencies-7.json",
		local:   "plugin/storage/es/mappings/jaeger-dependencies-7.json",
		size:    277,
		modtime: 1607528808,
		compressed: `
H4sIAAAAAAAC/2yPQWrDMBBF9z6FmGVIRDfd+BAttAcwivTtTJGnqmYMBaO7F5l00dDt478Hfx+cI5aE
76kEM1RRGh2dPgIW1EtCgSRIZOjlROe+VpixLEpjl391L9t6RZ0+50lvoaae2Xf3ctDX+f1grrXz/05F
yRzDg/V2p4/eGkphWbxADWmaGTmpz7yy0fj89Gdb8bVBTX0M8QYPCdcMGq1uGJw7unTv9UttaMNPAAAA
//9xSEX8FQEAAA==
`,
	},

	"/jaeger-dependencies.json": {
		name:    "jaeger-dependencies.json",
		local:   "plugin/storage/es/mappings/jaeger-dependencies.json",
		size:    271,
		modtime: 1607528808,
		compressed: `
H4sIAAAAAAAC/2yPQWrDMBBF9z7FMMuQiG660SFaaA9gFOvbmSJPVc0YCsZ3LzbZNGT7+O/BXzsidsy1
JAdH4tNXwoR2yajQDB0Edjnxed8Z3EUn47hrRCya8Rt0ma9o/ffY2y21bBxpXentoO/j58Fo287PnYZa
ZEgP1sedPnpzqlV0Cgpz5H4UlGyhyCzO8fXl37bhZ4G5hSENNwRouhZw9LagIzq6fO/tl7Zu6/4CAAD/
/yi/1FkPAQAA
`,
	},

	"/jaeger-service-7.json": {
		name:    "jaeger-service-7.json",
		local:   "plugin/storage/es/mappings/jaeger-service-7.json",
		size:    1144,
		modtime: 1607530809,
		compressed: `
H4sIAAAAAAAC/8ySQYvbMBCF7/kVw8BeQmJKYXvwvYdCuy1deipFTOSxM60sqZKSXWP834u1auIsmz31
0JNhNO/NN88zrgBQbMOPylNKHGzEGnA9jvD+/kvgVh5hmn4Sdxy2kcNRNG/XuFkBjDcgLXyL/OHjJ7iZ
ZiMyQpFnh9kXAF+1CUwNQg3jrJ2KJdtG2mIXOSWxXcS62GXQyh76HQflWhX3FJo8boS7XP3c3ucaTNnw
BU1gb0RTUZ1kX0v5ubAn78V2leWYuFGtsGliZaSXhPXtm4vewL8PHFOsNOk9V2xpZxjrFA78Yl4AGzTS
sh703FdCy4aW+rmCJTIx/dY7I3rAzbkpOGPckYPKuc/tr+b9ECQxZvnT9Mu4895Y9j1n3gyWetEqce8N
pfnvfi8IC97oyapEXVQ9+b/a8lYsL6sAmAbPWOMvHh5caBaLPUXaWRdY0c4dGeu3t+8Wz9OyFz2lveop
6T3WmKir1nh6nlbPFAtmH5zmGP8L7MJSXcPP3x/l2nxwnkMSjmc4LH/5Lh/OYsuruFdRT5g4j6Ekzv4L
19PhTatp9ScAAP//qjXetXgEAAA=
`,
	},

	"/jaeger-service.json": {
		name:    "jaeger-service.json",
		local:   "plugin/storage/es/mappings/jaeger-service.json",
		size:    1054,
		modtime: 1607528808,
		compressed: `
H4sIAAAAAAAC/8xTy47bIBTd+yvQXUYJqiqlCz4ildplVaEbc23TAqaA00aR/73CQ8aPibKaxXjhx+E8
OBhuFWOQyHqDiUAw2P1CaikcIoWLrumwg32mREpJuzaCyArGQDtF/7gb7JmC7BsZOwwqgmC3GztN6Nfm
+4Sxcdw/1gTyRte4UX0r6FZn0XvtWu4oJlKy0WRU5EZbnUAcP624gf4MFFPkNdYdcXJ4NgQihYHeeFLg
6urQ6hpEgyZSxdiUDCVxLi0VNTiYJO9IxtCY+ZMxeAlTs1m+ShXGoGTJ+6JHED9exbNNXnOPTiZso7To
lxHTaJncFs+/8+oJBPym698+KNhvx3Xr+kASz/2FQHw+flkRxjUfPKZOWkx1BwIStnwHC8JYPdCtWvjQ
1xTjBytSZsWfFSpvP6uFG5RzsdgAPvSeQtIUV9ugEE9oaV3tWa0nlRZ1IAdi0r17P/dq+cz3sRqr/wEA
AP//AN3DJR4EAAA=
`,
	},

	"/jaeger-span-7.json": {
		name:    "jaeger-span-7.json",
		local:   "plugin/storage/es/mappings/jaeger-span-7.json",
		size:    3675,
		modtime: 1607530809,
		compressed: `
H4sIAAAAAAAC/+xXwW7bOBC9+yuIAXIJHGGxQPag8/YQoEmLJj0VhTCWRjITimTJsRPD0L8XoulEtiSn
QJWiKHoyRM57fDOcN5a2MyFA6oKeMovM5LSHVMD5dive3X50VMon0TT3SBW5C29RX5zDfCbE9kzIUnz2
dPX+Wpw1LQsqiZ5aeEsqBIxzOMKijWtxTaQjXcgyUnlilrrykEaqoDDRq3pBLjNl5pfoinDUVtyE1Q/l
bVgTTSAcwDiySuZ4hPoUV49xNVordZVo8kxFVkpShU+UrCVDevnPQayjbyvy7JMc8yUlpHGhCFJ2Kwph
/WIJMQclS8o3eRsZKyYEaKzbZ4jVkqq+sEbJfAPzfYgzSpk1uSwUvA0eL/Sjk0wQkM1eSqfQIWWIqb5U
u9horGWeMdVWIbd3+iWevhfaXpJFnTFWPqvR7rFxL1IergoBvLEEKTzQ5tG44jmnuCsrbRxluDBrgvTf
y/862003FizyMquR8yWkwFgl5/C83cyOEB3N1pmcvP8tZEctyZj88Ps1Npp1xpJjSf5FHLDDnK7+78od
lzoq81kiWHSk+dainpDUT0vXlgFZGn0TnDKVSEbHd3KYURldwTjkWiol/RCwQKaujtK4GhlSIGvyZVbv
gD3mYrXL8Me1lAqrQQVSczsM+ghlhgG7cdcVHYcBpCUqT/MDL/Vackcla/KMtR3zUTeJvkl2o3YM2xN4
UuRJoWHzgTb91dcs/6rte1kFxBrVin7ZaYzVXaB9m/NmY0/N+CTez7yDzhvtI09uLXM6NvqkE5lxdNqb
xT3lDKegf7v0j+xSRyU50jm92Yh0VA5lPV1b998MJuXv/6n/LP2J6zjy6LA/D8Lf7N4GfDhZTQd9N+Wg
m7rjRl5Zw4fFrJl9DwAA//+0gIaiWw4AAA==
`,
	},

	"/jaeger-span.json": {
		name:    "jaeger-span.json",
		local:   "plugin/storage/es/mappings/jaeger-span.json",
		size:    3824,
		modtime: 1607528808,
		compressed: `
H4sIAAAAAAAC/+xWTW/bPAy++1cIPBap8eIFuoPPu+ywDlh7GwaDsWlHrb4mMd2Cwv998EeX2JWdDYiH
AVsOSUzpIfmI5GM9J0IAk3YKmSATcPWAVJO/Dg7N9RVs2vVAzNLUAbJ2uxAgTUnfUrPXW/K5rfKwQ18G
yMTzs7jtrB+qu84mmmYTx3hyShY4QX0crFOcRuekqVNDganMK0mqDKmSWjJkN/+N9nr6sqfAIS2w2FFK
BreKIGO/p1c+yaflwaCWBWQVqkCJEF1kGCIeSeclVbhXnL9YWhsqdXwUAvpg5dFZ+xmoCAFDrPzlxANk
n36Aj27aM3docsY65BrdaYhudUhuam9reXAEGTzS4av1JWym67I21lOOW/tEkP1/82a0oRnvB4e8yzVy
sYMMGOv0Ck42NEkEN2LhvC0ohD+MyJBVukRo+Pc5OfHWFeWk+s5bR54lhVEPsMeC3r0dc1ris8DlhAc4
9GT4zqFZwXlYx217QMjSmlvUdPmkGT3fyznPypoaloHvpVIyxOFlK4mjrCrrNTJkQM4Wu1z34GiEct/z
/tXMKoX1TD7ScCvNcZyyc7BeMsdExpq3mYxspKl7h1JTYNRuflzHxGKT2Ev3vIdIumdSPpN2t/xIh5j9
vM78hNZEWHaoJ1R7+u1RGev7zvmacZOl5+bcK+JFgCf9utB5gfyTLOi1iKzwqmBceB3Z7QMVDOcc/Ovv
v7q/PVXkyRS0uiR7quKncemhiN1pVogTu4ZcIszZkr2a+rmJn4BWr3B0si986jOTfHlhXadXF2/w/W/7
3SRN8j0AAP//a4xnIPAOAAA=
`,
	},

	"/": {
		name:  "/",
		local: `plugin/storage/es/mappings`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"plugin/storage/es/mappings": {
		_escData["/.nocover"],
		_escData["/jaeger-dependencies-7.json"],
		_escData["/jaeger-dependencies.json"],
		_escData["/jaeger-service-7.json"],
		_escData["/jaeger-service.json"],
		_escData["/jaeger-span-7.json"],
		_escData["/jaeger-span.json"],
	},
}
