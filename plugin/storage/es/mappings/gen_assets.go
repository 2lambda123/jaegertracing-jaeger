// Code generated by "esc -pkg mappings -o plugin/storage/es/mappings/gen_assets.go -ignore assets -prefix plugin/storage/es/mappings plugin/storage/es/mappings"; DO NOT EDIT.

package mappings

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/.nocover": {
		name:    ".nocover",
		local:   "plugin/storage/es/mappings/.nocover",
		size:    43,
		modtime: 1613287726,
		compressed: `
H4sIAAAAAAAC/youSSzJzFYoSEzOTkxPVcjILy4pVkgsLcnXTU/NSy1KLElNUUjLzEkt1uMCBAAA//8y
IKK1KwAAAA==
`,
	},

	"/jaeger-dependencies-7.json": {
		name:    "jaeger-dependencies-7.json",
		local:   "plugin/storage/es/mappings/jaeger-dependencies-7.json",
		size:    263,
		modtime: 1613970646,
		compressed: `
H4sIAAAAAAAC/2yPQWrDMBBF9z6FmGVIRDfd+BjtAYQi/ThT5KmqGUPB6O5FIV60dPnhvQd/n5wjlozv
UKMZmijNjk4fEQvaJaNCMiQx9HKi86AVZiyL0jzkQ/eyrVe08HkLeo8tj8y+O//+GK738/9wQy2c4oG/
PedfYY21sixeoIYcboyS1Rde2Wh+ffnFNnxtUFOfYrrDQ+K1gGZrGybnHl169saJPvXpJwAA///9rTRo
BwEAAA==
`,
	},

	"/jaeger-dependencies.json": {
		name:    "jaeger-dependencies.json",
		local:   "plugin/storage/es/mappings/jaeger-dependencies.json",
		size:    257,
		modtime: 1613970646,
		compressed: `
H4sIAAAAAAAC/2zPwWrDMBAE0Lu/YtljSEQvvegz2g8wijVxtshbVbuGgtG/Fwf30JLjwJuB2QYidiy1
JAdH4tNHwox2yajQDJ0EdjnxeXcGd9HZOO41IhbN+A66Lle08fM22j21bBxp2yi8PwL1fn6OG2qRKf3y
tyP+LyypVtE5KMyRx5ugZAtFFnGOry9/bMPXCnMLU5ruCNB0LeDobcVA9NjlY28/0Yc+/AQAAP//oiqp
xAEBAAA=
`,
	},

	"/jaeger-service-7.json": {
		name:    "jaeger-service-7.json",
		local:   "plugin/storage/es/mappings/jaeger-service-7.json",
		size:    1141,
		modtime: 1613970646,
		compressed: `
H4sIAAAAAAAC/8ySwY7TMBCG732K0Ryr1kJIyyFvsBIgBOKEkDV1pqnBsY3tdjeK/O7IxttmC9VeOOwp
iuefz//8nnkFgNr2/Cg9pcTBRuwA1/MM4r4cfwq814+Q8w/igcM2cjhpxds1blYA87wFvQfxNfL9+w+Q
c8GR0RS5cAodAF+EBaYeoYO59OcnMNu+ESOnpO0QsWvE6ljY47jjIN1exgOFvt44g/hSfyBX0D/Egb3R
ipocxOf2f90xkvfaDsJyTNzLvWbTR2H0qBN2d2+eaQP/OnJMUShSBxZsaWcYuxSOXKf5KyWADRq9ZzWp
ImxRVaKlsZxgC0mbceud0WrCzUUUnDHuxEHWtIv8xZQfgk6MFZGvI66TY5v4knM/WRq1kolHbyiVR/3W
PCwMR09WJhqiHMk/9bZaQz4/BcA0ecYOf/L04EK/mOxPqIN1gSXt3Imxe3v3blHOSy16Sgc5UlIH7DDR
INZ4LufVVcfCsw9OcYyvwnbzIm7Zr9/vbd98cJ5D0hwv5rA98ce6OYspb9q9afVsE8s1lLSz/4N63rq8
yqvfAQAA//+DAASXdQQAAA==
`,
	},

	"/jaeger-service.json": {
		name:    "jaeger-service.json",
		local:   "plugin/storage/es/mappings/jaeger-service.json",
		size:    1040,
		modtime: 1613970646,
		compressed: `
H4sIAAAAAAAC/8yTsW7zIBSFdz8FumOUoF+/lA48RId2rCp0Y65tWsAUcNoo8rtXpKS20yhTh3qwzeXc
c/gwPlaMQSLrDSYCwWD1gtRS2EQKe13TZgXrLImUknZtBJE7GAPtFH1wN9gdBdk3MnYYVATBjkfGH08D
No7r6+JA3ugaz/KHMrxssOi9di13FBMp2WgyKnKjrU4gtv8W2kBvA8UUeY11R5wc7gyBSGGgH54UuDo4
tLoG0aCJVDF2SoaSOGFKRQ0OJslzJdfQmGnIGHyFqcksXwWFMShZ8rzNEcTTd/Nkk3fZo5MJ2ygt+nnE
abYs7rKeP+DBEwh4pcN7HxSsL+d16/pAEnf9nkD8394tBONSDx5TJy2mugMBCVu+gplgrK70LSh86GuK
8Y+BlFXxW0Dl7bmauUH5E2YHwIfeU0ia4uIYFOE9Wlqi3cK6gTTDgRyISffu99yr+TPfx2qsPgMAAP//
4LJZIRAEAAA=
`,
	},

	"/jaeger-span-7.json": {
		name:    "jaeger-span-7.json",
		local:   "plugin/storage/es/mappings/jaeger-span-7.json",
		size:    3673,
		modtime: 1613970646,
		compressed: `
H4sIAAAAAAAC/+xXQW/bPAy951cIPBaJ8eEDuoPPuxRYh2HtTsNgMDLtqJUlTWLSBob/+2DFSZPYTgfM
HYZhp0IS39Mjxcc69UwIUCan58whM3kTIBVwVdciuWm3P3kq1LNomgekkvwiODSLK5jPhKjrhVCFSL4E
uvlwK5qm5UKtMFBL0lILAZeZPGHexrbYZk9KJu/YAjErUwZIO7YoNTHrakk+s0UWVujzeFstkru4EE0k
Ggj25LSSuA//3C3PARU6p0yZGApMeVYo0nlItKoUQ3r930msp+9rChwSiXJFCRlcaoKU/ZpiWF33SiTE
HLQqSG5lG9rVSQgwWLVr6OqjdLVwViu5hfk+xFut7YZ8FsvcBl8u75NXTBDRzV7Poboxa+iyfSlxvjVY
KZkxVU4jt2/5tbt/L7V9GYcmYyxDVqHbY7uzjvJ0VwjgrSNI4ZG2T9bnh6y6U1Ua6ynDpd0QpP9fvzs6
bo5jwSGvsgpZriAFxjK5gsNxMztDHGl23koK4Y+Q3WlJxuTHv9+6XnPeOvKsKLyIA/Yo6eb9sdxxqaMy
DxLBoSfDdw7NhKRhWrq2DMjKmo/RK1OJZPR8r4YZtTUljENuldYqDAFzZDrWUVhfIUMK5KxcZdUO2GPO
17sMf15LobEcVKAMt6Ogj9B2GLCbeMeiu2EAaYE60PzES72W3FGpigJj5cZ8dJxE3yS7aTuG7Qm8KPKi
0Hj4SNv+7muWf9X2vawiYoN6Tb/tNsbyPtK+zX2zsVUzPon3M++k80b7KJDfKEnnRp90IjOOTnu7fCDJ
cAn6r0v/yi71VJAnI+nNRqSnYijr6dq6/2UwKX//n/qv0l94jjOPDvvzJPzN3m3Ah5PVdNB3Uw66qTtu
5JM1/rCYNbMfAQAA///EkgH2WQ4AAA==
`,
	},

	"/jaeger-span.json": {
		name:    "jaeger-span.json",
		local:   "plugin/storage/es/mappings/jaeger-span.json",
		size:    3810,
		modtime: 1613970646,
		compressed: `
H4sIAAAAAAAC/+xWTW/bPAy++1cIPBap8eIFuoPPu+ywHdbehsFgbNpRq69JTLeg8H8f/JElTmV7A+Jh
wJZDEknkQz4S+UgviRDApJ1CJsgE3Dwi1eRvg0NzewObdj0QszR1gKw1FwKkKelbavZ6Sz63VR526MsA
mXh5Eel9NxBNs4kbe3JKFng0/zgMLx00OidNnRoKTGVeSVJlSJXUkiG7+29k6+nLngKHtMBiRykZ3CqC
jP2eXmGST8uDQS0LyCpUgRIhusgwRDzRzEuqcK84P860c6jUaSgE9MHKE1j7GagIAUOs/LjHAbJPP5xP
MO0uOzQ5Yx1yje48RLc6JHc5357ewRFk8ESHr9aXsLlcl7WxnnLc2meC7P+7NyODZmwPDnmXa+RiBxkw
1ukNnBk0ScRvxMJ5W1AIfxiRIat0jtDw73NyhtYdytnpO28deZYURjXAHgt693bMaY7PDJczHuDQk+F7
h2YF8LAObLtByNKaD6jp+kkzen6QU8jKmhrmHd9LpWSIu5etCI6yqqzXyJABOVvsct07RyOU+573r2ZW
Kawn8pGGWzGO+yk75dZL5pjIWPM2Fy0bKeoeUGoKjNpNt+uYWKwTe+meRoiku5DyQtrd8hMdYvPLOvMT
WhNh2Xk9o9rTb4/KWD904GvGTebGzdIVcRTgi3qdqbxA/lkW9FpEVrgqGGeuI7t9pIJhCeBfff/V9e2p
Ik+moNUl2VMV341rN0XsTbNCnNgz5BphFo/sVddPdfyF0+onHO3sK+/6RCdfX1jXqdXZF3z/2343SZN8
DwAA///IeBTv4g4AAA==
`,
	},

	"/mapping.go": {
		name:    "mapping.go",
		local:   "plugin/storage/es/mappings/mapping.go",
		size:    2548,
		modtime: 1613970646,
		compressed: `
H4sIAAAAAAAC/5RWXW/bNhR9Nn/FrR4GaVWkLhhWwIUf3CbdvKVOETkr+jRQ0pXEViI5kortBf3vA6kP
y46xdAaCwOTlueeceyg5juGdkHvFysqAnwVw+eryJ9hUCL9TLFHBsjWVUDoicUziGG5YhlxjDi3PUYGp
EJaSZhUOOyH8iUozweEyegW+LfD6LS94YyH2ooWG7oELA61GMBXTULAaAXcZSgOMQyYaWTPKM4QtM5Xr
06NYJvC5xxCpoYwDhUzIPYhiWgjU9KQrY+Q8jrfbbUQd2UioMq67Mh3frN5dr5Pri8voVX/gnteoNSj8
u2UKc0j3QKWsWUbTGqGmWxAKaKkQczDCEt4qZhgvQ9CiMFuq0MLkTBvF0tYc+TXQY/qoQHCgHLxlAqvE
g7fLZJWEFuTTavPb7f0GPi3v7pbrzeo6gds7eHe7vlptVrfrBG7fw3L9Gf5Yra9CQGYqVIA7qawCoYBZ
JzF3tiWIRxQK0VHSEjNWsAxqysuWlgileEDFGS9BomqYthPVQHluYWrWMEONW3qiKyJE0uyrBWmolIyX
mhDWSKEM+GTmpXuD2iNk5pXMVG0aZaKJv7iwGUUzxsv+Wyy/lrEtDYht+qEDe9uy2nasRJ1rkFTRBg2q
ybCMAIWOFeWANdWGZRqpyipgPMcdGGxkTQ0Ss5d4iquNajMDj2S26cuGHdTRyRKZJRVVuYbxw7j55Wcy
u0MXFn2yfK2Hu9F9WsYNma0sqY8KC7ZzqzYSvCSze42rmw8H7FSImnxzXqxxO7DKBO8ou+mAQtMqNylg
nBlGa/YP5iciSdHybALim/SMuhC0UxeCGuQ4HSHgqMMqsN97+h310F5rS90yDuDHE4cfyaxjCT8c7zye
EJiDSUMy602ej3QGd+cjMVs1mjs/8AthYu585GnLO3fnPdWQzL713v6Kpqc1mmnT3UeqjzSkVHd39jhg
D13fzmC/SU/FBxN4f8DqXAvAH+xDpYQKrFGsgCaNDrlZLOC1XR8cbNKoYLsB0Is9eDlSfAnexevoixbc
C6y87zwznBjdSCTlCaoHlmF/SI/OaEm5y53uCg5X/j8dOAPpT/Q/9cH26SvdMswXVsfETK97aFzYSquX
Fa7uxQI4q6eWeV7o/lAp54o+4vEcelf8vxr0y0cSTptyVh8Mv0Jpw8YzhvqJ4/lk8zvdPofnn43bISFn
tE87d/lwXWtB86GU0wbHOHf/3fRC+Mt6+j5J3Jpf0Nr+UrDlwcGgEfKskElmn784ZGYaWU+HefJsiT5S
pdGfku9Rg+dmO8zVvvLRwXPc+u61Fr1tiwJVQIabO322v1iA5zmwk42XC/AuPIfZN54vwPKPrneYtQb9
rlUITRq8eZ7Z6Gh3LOpND4aY/RsAAP//olBa1PQJAAA=
`,
	},

	"/mapping_test.go": {
		name:    "mapping_test.go",
		local:   "plugin/storage/es/mappings/mapping_test.go",
		size:    8669,
		modtime: 1613970646,
		compressed: `
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
`,
	},

	"/": {
		name:  "/",
		local: `plugin/storage/es/mappings`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"plugin/storage/es/mappings": {
		_escData["/.nocover"],
		_escData["/jaeger-dependencies-7.json"],
		_escData["/jaeger-dependencies.json"],
		_escData["/jaeger-service-7.json"],
		_escData["/jaeger-service.json"],
		_escData["/jaeger-span-7.json"],
		_escData["/jaeger-span.json"],
		_escData["/mapping.go"],
		_escData["/mapping_test.go"],
	},
}
